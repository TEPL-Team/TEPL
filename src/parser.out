Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> body
Rule 1     body -> stmt
Rule 2     body -> body stmt
Rule 3     stmt -> set_stmt
Rule 4     stmt -> output_stmt
Rule 5     stmt -> if_then_stmt
Rule 6     stmt -> input_stmt
Rule 7     stmt -> while_stmt
Rule 8     stmt -> repeat_stmt
Rule 9     stmt -> pause_stmt
Rule 10    stmt -> forever_stmt
Rule 11    stmt -> exit_stmt
Rule 12    stmt -> function_stmt
Rule 13    stmt -> return_stmt
Rule 14    stmt -> call_stmt
Rule 15    stmt -> createfile_stmt
Rule 16    stmt -> readfile_stmt
Rule 17    var_stmt -> SET ID
Rule 18    set_stmt -> var_stmt TO expr
Rule 19    output_stmt -> OUTPUT expr
Rule 20    if_then_stmt -> IF expr THEN body END
Rule 21    input_stmt -> ASK expr
Rule 22    while_stmt -> WHILE condition DO body END
Rule 23    repeat -> REPEAT expr TIMES USING expr
Rule 24    repeat_stmt -> repeat body END
Rule 25    pause_stmt -> PAUSE expr
Rule 26    forever_stmt -> FOREVER DO body END
Rule 27    exit_stmt -> EXIT LOOP
Rule 28    function_stmt -> FUNCTION expr WITH params MEANS body END
Rule 29    return_stmt -> RETURN expr
Rule 30    call_stmt -> ID params
Rule 31    createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
Rule 32    readfile_stmt -> READ FILE expr
Rule 33    expr -> binop
Rule 34    expr -> condition
Rule 35    expr -> CALL expr params
Rule 36    binop -> expr PLUS expr
Rule 37    binop -> expr MINUS expr
Rule 38    binop -> expr MULTIPLY expr
Rule 39    binop -> expr DIVIDE expr
Rule 40    condition -> expr GT expr
Rule 41    condition -> expr LT expr
Rule 42    condition -> expr ET expr
Rule 43    condition -> expr GTE expr
Rule 44    condition -> expr LTE expr
Rule 45    condition -> expr NE expr
Rule 46    expr -> DIGIT
Rule 47    expr -> ID
Rule 48    expr -> LPAREN expr RPAREN
Rule 49    expr -> RANDOM NUMBER FROM expr TO expr
Rule 50    expr -> TEXT
Rule 51    expr -> CONVERT expr TO datatype
Rule 52    datatype -> NUM
Rule 53    datatype -> TXT
Rule 54    params -> expr
Rule 55    params -> params expr

Terminals, with rules where they appear

ADD                  : 31
ASK                  : 21
CALL                 : 35
COMMENT              : 
CONTENT              : 31
CONVERT              : 51
CREATE               : 31
DIGIT                : 46
DIVIDE               : 39
DO                   : 22 26
END                  : 20 22 24 26 28 31
ET                   : 42
EXIT                 : 27
FILE                 : 31 32
FOREVER              : 26
FROM                 : 49
FUNCTION             : 28
GT                   : 40
GTE                  : 43
ID                   : 17 30 47
IF                   : 20
IN                   : 31
IT                   : 31
LOOP                 : 27
LPAREN               : 48
LT                   : 41
LTE                  : 44
MEANS                : 28
MINUS                : 37
MULTIPLY             : 38
NAME                 : 31
NE                   : 45
NUM                  : 52
NUMBER               : 49
OUTPUT               : 19
PAUSE                : 25
PLACE                : 31
PLUS                 : 36
RANDOM               : 49
READ                 : 32
REPEAT               : 23
RETURN               : 29
RPAREN               : 48
SET                  : 17
TEXT                 : 50
THEN                 : 20
TIMES                : 23
TO                   : 18 49 51
TXT                  : 53
USING                : 23
WHILE                : 22
WITH                 : 28
error                : 

Nonterminals, with rules where they appear

binop                : 33
body                 : 2 20 22 24 26 28 0
call_stmt            : 14
condition            : 22 34
createfile_stmt      : 15
datatype             : 51
exit_stmt            : 11
expr                 : 18 19 20 21 23 23 25 28 29 31 31 31 32 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 48 49 49 51 54 55
forever_stmt         : 10
function_stmt        : 12
if_then_stmt         : 5
input_stmt           : 6
output_stmt          : 4
params               : 28 30 35 55
pause_stmt           : 9
readfile_stmt        : 16
repeat               : 24
repeat_stmt          : 8
return_stmt          : 13
set_stmt             : 3
stmt                 : 1 2
var_stmt             : 18
while_stmt           : 7

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . stmt
    (2) body -> . body stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    body                           shift and go to state 1
    stmt                           shift and go to state 2
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 1

    (0) S' -> body .
    (2) body -> body . stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    stmt                           shift and go to state 33
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 2

    (1) body -> stmt .

    OUTPUT          reduce using rule 1 (body -> stmt .)
    IF              reduce using rule 1 (body -> stmt .)
    ASK             reduce using rule 1 (body -> stmt .)
    WHILE           reduce using rule 1 (body -> stmt .)
    PAUSE           reduce using rule 1 (body -> stmt .)
    FOREVER         reduce using rule 1 (body -> stmt .)
    EXIT            reduce using rule 1 (body -> stmt .)
    FUNCTION        reduce using rule 1 (body -> stmt .)
    RETURN          reduce using rule 1 (body -> stmt .)
    ID              reduce using rule 1 (body -> stmt .)
    CREATE          reduce using rule 1 (body -> stmt .)
    READ            reduce using rule 1 (body -> stmt .)
    SET             reduce using rule 1 (body -> stmt .)
    REPEAT          reduce using rule 1 (body -> stmt .)
    $end            reduce using rule 1 (body -> stmt .)
    END             reduce using rule 1 (body -> stmt .)


state 3

    (3) stmt -> set_stmt .

    OUTPUT          reduce using rule 3 (stmt -> set_stmt .)
    IF              reduce using rule 3 (stmt -> set_stmt .)
    ASK             reduce using rule 3 (stmt -> set_stmt .)
    WHILE           reduce using rule 3 (stmt -> set_stmt .)
    PAUSE           reduce using rule 3 (stmt -> set_stmt .)
    FOREVER         reduce using rule 3 (stmt -> set_stmt .)
    EXIT            reduce using rule 3 (stmt -> set_stmt .)
    FUNCTION        reduce using rule 3 (stmt -> set_stmt .)
    RETURN          reduce using rule 3 (stmt -> set_stmt .)
    ID              reduce using rule 3 (stmt -> set_stmt .)
    CREATE          reduce using rule 3 (stmt -> set_stmt .)
    READ            reduce using rule 3 (stmt -> set_stmt .)
    SET             reduce using rule 3 (stmt -> set_stmt .)
    REPEAT          reduce using rule 3 (stmt -> set_stmt .)
    $end            reduce using rule 3 (stmt -> set_stmt .)
    END             reduce using rule 3 (stmt -> set_stmt .)


state 4

    (4) stmt -> output_stmt .

    OUTPUT          reduce using rule 4 (stmt -> output_stmt .)
    IF              reduce using rule 4 (stmt -> output_stmt .)
    ASK             reduce using rule 4 (stmt -> output_stmt .)
    WHILE           reduce using rule 4 (stmt -> output_stmt .)
    PAUSE           reduce using rule 4 (stmt -> output_stmt .)
    FOREVER         reduce using rule 4 (stmt -> output_stmt .)
    EXIT            reduce using rule 4 (stmt -> output_stmt .)
    FUNCTION        reduce using rule 4 (stmt -> output_stmt .)
    RETURN          reduce using rule 4 (stmt -> output_stmt .)
    ID              reduce using rule 4 (stmt -> output_stmt .)
    CREATE          reduce using rule 4 (stmt -> output_stmt .)
    READ            reduce using rule 4 (stmt -> output_stmt .)
    SET             reduce using rule 4 (stmt -> output_stmt .)
    REPEAT          reduce using rule 4 (stmt -> output_stmt .)
    $end            reduce using rule 4 (stmt -> output_stmt .)
    END             reduce using rule 4 (stmt -> output_stmt .)


state 5

    (5) stmt -> if_then_stmt .

    OUTPUT          reduce using rule 5 (stmt -> if_then_stmt .)
    IF              reduce using rule 5 (stmt -> if_then_stmt .)
    ASK             reduce using rule 5 (stmt -> if_then_stmt .)
    WHILE           reduce using rule 5 (stmt -> if_then_stmt .)
    PAUSE           reduce using rule 5 (stmt -> if_then_stmt .)
    FOREVER         reduce using rule 5 (stmt -> if_then_stmt .)
    EXIT            reduce using rule 5 (stmt -> if_then_stmt .)
    FUNCTION        reduce using rule 5 (stmt -> if_then_stmt .)
    RETURN          reduce using rule 5 (stmt -> if_then_stmt .)
    ID              reduce using rule 5 (stmt -> if_then_stmt .)
    CREATE          reduce using rule 5 (stmt -> if_then_stmt .)
    READ            reduce using rule 5 (stmt -> if_then_stmt .)
    SET             reduce using rule 5 (stmt -> if_then_stmt .)
    REPEAT          reduce using rule 5 (stmt -> if_then_stmt .)
    $end            reduce using rule 5 (stmt -> if_then_stmt .)
    END             reduce using rule 5 (stmt -> if_then_stmt .)


state 6

    (6) stmt -> input_stmt .

    OUTPUT          reduce using rule 6 (stmt -> input_stmt .)
    IF              reduce using rule 6 (stmt -> input_stmt .)
    ASK             reduce using rule 6 (stmt -> input_stmt .)
    WHILE           reduce using rule 6 (stmt -> input_stmt .)
    PAUSE           reduce using rule 6 (stmt -> input_stmt .)
    FOREVER         reduce using rule 6 (stmt -> input_stmt .)
    EXIT            reduce using rule 6 (stmt -> input_stmt .)
    FUNCTION        reduce using rule 6 (stmt -> input_stmt .)
    RETURN          reduce using rule 6 (stmt -> input_stmt .)
    ID              reduce using rule 6 (stmt -> input_stmt .)
    CREATE          reduce using rule 6 (stmt -> input_stmt .)
    READ            reduce using rule 6 (stmt -> input_stmt .)
    SET             reduce using rule 6 (stmt -> input_stmt .)
    REPEAT          reduce using rule 6 (stmt -> input_stmt .)
    $end            reduce using rule 6 (stmt -> input_stmt .)
    END             reduce using rule 6 (stmt -> input_stmt .)


state 7

    (7) stmt -> while_stmt .

    OUTPUT          reduce using rule 7 (stmt -> while_stmt .)
    IF              reduce using rule 7 (stmt -> while_stmt .)
    ASK             reduce using rule 7 (stmt -> while_stmt .)
    WHILE           reduce using rule 7 (stmt -> while_stmt .)
    PAUSE           reduce using rule 7 (stmt -> while_stmt .)
    FOREVER         reduce using rule 7 (stmt -> while_stmt .)
    EXIT            reduce using rule 7 (stmt -> while_stmt .)
    FUNCTION        reduce using rule 7 (stmt -> while_stmt .)
    RETURN          reduce using rule 7 (stmt -> while_stmt .)
    ID              reduce using rule 7 (stmt -> while_stmt .)
    CREATE          reduce using rule 7 (stmt -> while_stmt .)
    READ            reduce using rule 7 (stmt -> while_stmt .)
    SET             reduce using rule 7 (stmt -> while_stmt .)
    REPEAT          reduce using rule 7 (stmt -> while_stmt .)
    $end            reduce using rule 7 (stmt -> while_stmt .)
    END             reduce using rule 7 (stmt -> while_stmt .)


state 8

    (8) stmt -> repeat_stmt .

    OUTPUT          reduce using rule 8 (stmt -> repeat_stmt .)
    IF              reduce using rule 8 (stmt -> repeat_stmt .)
    ASK             reduce using rule 8 (stmt -> repeat_stmt .)
    WHILE           reduce using rule 8 (stmt -> repeat_stmt .)
    PAUSE           reduce using rule 8 (stmt -> repeat_stmt .)
    FOREVER         reduce using rule 8 (stmt -> repeat_stmt .)
    EXIT            reduce using rule 8 (stmt -> repeat_stmt .)
    FUNCTION        reduce using rule 8 (stmt -> repeat_stmt .)
    RETURN          reduce using rule 8 (stmt -> repeat_stmt .)
    ID              reduce using rule 8 (stmt -> repeat_stmt .)
    CREATE          reduce using rule 8 (stmt -> repeat_stmt .)
    READ            reduce using rule 8 (stmt -> repeat_stmt .)
    SET             reduce using rule 8 (stmt -> repeat_stmt .)
    REPEAT          reduce using rule 8 (stmt -> repeat_stmt .)
    $end            reduce using rule 8 (stmt -> repeat_stmt .)
    END             reduce using rule 8 (stmt -> repeat_stmt .)


state 9

    (9) stmt -> pause_stmt .

    OUTPUT          reduce using rule 9 (stmt -> pause_stmt .)
    IF              reduce using rule 9 (stmt -> pause_stmt .)
    ASK             reduce using rule 9 (stmt -> pause_stmt .)
    WHILE           reduce using rule 9 (stmt -> pause_stmt .)
    PAUSE           reduce using rule 9 (stmt -> pause_stmt .)
    FOREVER         reduce using rule 9 (stmt -> pause_stmt .)
    EXIT            reduce using rule 9 (stmt -> pause_stmt .)
    FUNCTION        reduce using rule 9 (stmt -> pause_stmt .)
    RETURN          reduce using rule 9 (stmt -> pause_stmt .)
    ID              reduce using rule 9 (stmt -> pause_stmt .)
    CREATE          reduce using rule 9 (stmt -> pause_stmt .)
    READ            reduce using rule 9 (stmt -> pause_stmt .)
    SET             reduce using rule 9 (stmt -> pause_stmt .)
    REPEAT          reduce using rule 9 (stmt -> pause_stmt .)
    $end            reduce using rule 9 (stmt -> pause_stmt .)
    END             reduce using rule 9 (stmt -> pause_stmt .)


state 10

    (10) stmt -> forever_stmt .

    OUTPUT          reduce using rule 10 (stmt -> forever_stmt .)
    IF              reduce using rule 10 (stmt -> forever_stmt .)
    ASK             reduce using rule 10 (stmt -> forever_stmt .)
    WHILE           reduce using rule 10 (stmt -> forever_stmt .)
    PAUSE           reduce using rule 10 (stmt -> forever_stmt .)
    FOREVER         reduce using rule 10 (stmt -> forever_stmt .)
    EXIT            reduce using rule 10 (stmt -> forever_stmt .)
    FUNCTION        reduce using rule 10 (stmt -> forever_stmt .)
    RETURN          reduce using rule 10 (stmt -> forever_stmt .)
    ID              reduce using rule 10 (stmt -> forever_stmt .)
    CREATE          reduce using rule 10 (stmt -> forever_stmt .)
    READ            reduce using rule 10 (stmt -> forever_stmt .)
    SET             reduce using rule 10 (stmt -> forever_stmt .)
    REPEAT          reduce using rule 10 (stmt -> forever_stmt .)
    $end            reduce using rule 10 (stmt -> forever_stmt .)
    END             reduce using rule 10 (stmt -> forever_stmt .)


state 11

    (11) stmt -> exit_stmt .

    OUTPUT          reduce using rule 11 (stmt -> exit_stmt .)
    IF              reduce using rule 11 (stmt -> exit_stmt .)
    ASK             reduce using rule 11 (stmt -> exit_stmt .)
    WHILE           reduce using rule 11 (stmt -> exit_stmt .)
    PAUSE           reduce using rule 11 (stmt -> exit_stmt .)
    FOREVER         reduce using rule 11 (stmt -> exit_stmt .)
    EXIT            reduce using rule 11 (stmt -> exit_stmt .)
    FUNCTION        reduce using rule 11 (stmt -> exit_stmt .)
    RETURN          reduce using rule 11 (stmt -> exit_stmt .)
    ID              reduce using rule 11 (stmt -> exit_stmt .)
    CREATE          reduce using rule 11 (stmt -> exit_stmt .)
    READ            reduce using rule 11 (stmt -> exit_stmt .)
    SET             reduce using rule 11 (stmt -> exit_stmt .)
    REPEAT          reduce using rule 11 (stmt -> exit_stmt .)
    $end            reduce using rule 11 (stmt -> exit_stmt .)
    END             reduce using rule 11 (stmt -> exit_stmt .)


state 12

    (12) stmt -> function_stmt .

    OUTPUT          reduce using rule 12 (stmt -> function_stmt .)
    IF              reduce using rule 12 (stmt -> function_stmt .)
    ASK             reduce using rule 12 (stmt -> function_stmt .)
    WHILE           reduce using rule 12 (stmt -> function_stmt .)
    PAUSE           reduce using rule 12 (stmt -> function_stmt .)
    FOREVER         reduce using rule 12 (stmt -> function_stmt .)
    EXIT            reduce using rule 12 (stmt -> function_stmt .)
    FUNCTION        reduce using rule 12 (stmt -> function_stmt .)
    RETURN          reduce using rule 12 (stmt -> function_stmt .)
    ID              reduce using rule 12 (stmt -> function_stmt .)
    CREATE          reduce using rule 12 (stmt -> function_stmt .)
    READ            reduce using rule 12 (stmt -> function_stmt .)
    SET             reduce using rule 12 (stmt -> function_stmt .)
    REPEAT          reduce using rule 12 (stmt -> function_stmt .)
    $end            reduce using rule 12 (stmt -> function_stmt .)
    END             reduce using rule 12 (stmt -> function_stmt .)


state 13

    (13) stmt -> return_stmt .

    OUTPUT          reduce using rule 13 (stmt -> return_stmt .)
    IF              reduce using rule 13 (stmt -> return_stmt .)
    ASK             reduce using rule 13 (stmt -> return_stmt .)
    WHILE           reduce using rule 13 (stmt -> return_stmt .)
    PAUSE           reduce using rule 13 (stmt -> return_stmt .)
    FOREVER         reduce using rule 13 (stmt -> return_stmt .)
    EXIT            reduce using rule 13 (stmt -> return_stmt .)
    FUNCTION        reduce using rule 13 (stmt -> return_stmt .)
    RETURN          reduce using rule 13 (stmt -> return_stmt .)
    ID              reduce using rule 13 (stmt -> return_stmt .)
    CREATE          reduce using rule 13 (stmt -> return_stmt .)
    READ            reduce using rule 13 (stmt -> return_stmt .)
    SET             reduce using rule 13 (stmt -> return_stmt .)
    REPEAT          reduce using rule 13 (stmt -> return_stmt .)
    $end            reduce using rule 13 (stmt -> return_stmt .)
    END             reduce using rule 13 (stmt -> return_stmt .)


state 14

    (14) stmt -> call_stmt .

    OUTPUT          reduce using rule 14 (stmt -> call_stmt .)
    IF              reduce using rule 14 (stmt -> call_stmt .)
    ASK             reduce using rule 14 (stmt -> call_stmt .)
    WHILE           reduce using rule 14 (stmt -> call_stmt .)
    PAUSE           reduce using rule 14 (stmt -> call_stmt .)
    FOREVER         reduce using rule 14 (stmt -> call_stmt .)
    EXIT            reduce using rule 14 (stmt -> call_stmt .)
    FUNCTION        reduce using rule 14 (stmt -> call_stmt .)
    RETURN          reduce using rule 14 (stmt -> call_stmt .)
    ID              reduce using rule 14 (stmt -> call_stmt .)
    CREATE          reduce using rule 14 (stmt -> call_stmt .)
    READ            reduce using rule 14 (stmt -> call_stmt .)
    SET             reduce using rule 14 (stmt -> call_stmt .)
    REPEAT          reduce using rule 14 (stmt -> call_stmt .)
    $end            reduce using rule 14 (stmt -> call_stmt .)
    END             reduce using rule 14 (stmt -> call_stmt .)


state 15

    (15) stmt -> createfile_stmt .

    OUTPUT          reduce using rule 15 (stmt -> createfile_stmt .)
    IF              reduce using rule 15 (stmt -> createfile_stmt .)
    ASK             reduce using rule 15 (stmt -> createfile_stmt .)
    WHILE           reduce using rule 15 (stmt -> createfile_stmt .)
    PAUSE           reduce using rule 15 (stmt -> createfile_stmt .)
    FOREVER         reduce using rule 15 (stmt -> createfile_stmt .)
    EXIT            reduce using rule 15 (stmt -> createfile_stmt .)
    FUNCTION        reduce using rule 15 (stmt -> createfile_stmt .)
    RETURN          reduce using rule 15 (stmt -> createfile_stmt .)
    ID              reduce using rule 15 (stmt -> createfile_stmt .)
    CREATE          reduce using rule 15 (stmt -> createfile_stmt .)
    READ            reduce using rule 15 (stmt -> createfile_stmt .)
    SET             reduce using rule 15 (stmt -> createfile_stmt .)
    REPEAT          reduce using rule 15 (stmt -> createfile_stmt .)
    $end            reduce using rule 15 (stmt -> createfile_stmt .)
    END             reduce using rule 15 (stmt -> createfile_stmt .)


state 16

    (16) stmt -> readfile_stmt .

    OUTPUT          reduce using rule 16 (stmt -> readfile_stmt .)
    IF              reduce using rule 16 (stmt -> readfile_stmt .)
    ASK             reduce using rule 16 (stmt -> readfile_stmt .)
    WHILE           reduce using rule 16 (stmt -> readfile_stmt .)
    PAUSE           reduce using rule 16 (stmt -> readfile_stmt .)
    FOREVER         reduce using rule 16 (stmt -> readfile_stmt .)
    EXIT            reduce using rule 16 (stmt -> readfile_stmt .)
    FUNCTION        reduce using rule 16 (stmt -> readfile_stmt .)
    RETURN          reduce using rule 16 (stmt -> readfile_stmt .)
    ID              reduce using rule 16 (stmt -> readfile_stmt .)
    CREATE          reduce using rule 16 (stmt -> readfile_stmt .)
    READ            reduce using rule 16 (stmt -> readfile_stmt .)
    SET             reduce using rule 16 (stmt -> readfile_stmt .)
    REPEAT          reduce using rule 16 (stmt -> readfile_stmt .)
    $end            reduce using rule 16 (stmt -> readfile_stmt .)
    END             reduce using rule 16 (stmt -> readfile_stmt .)


state 17

    (18) set_stmt -> var_stmt . TO expr

    TO              shift and go to state 34


state 18

    (19) output_stmt -> OUTPUT . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 35
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 19

    (20) if_then_stmt -> IF . expr THEN body END
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 45
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 20

    (21) input_stmt -> ASK . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 46
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 21

    (22) while_stmt -> WHILE . condition DO body END
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    condition                      shift and go to state 47
    expr                           shift and go to state 48
    binop                          shift and go to state 36

state 22

    (24) repeat_stmt -> repeat . body END
    (1) body -> . stmt
    (2) body -> . body stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    repeat                         shift and go to state 22
    body                           shift and go to state 49
    stmt                           shift and go to state 2
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17

state 23

    (25) pause_stmt -> PAUSE . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 50
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 24

    (26) forever_stmt -> FOREVER . DO body END

    DO              shift and go to state 51


state 25

    (27) exit_stmt -> EXIT . LOOP

    LOOP            shift and go to state 52


state 26

    (28) function_stmt -> FUNCTION . expr WITH params MEANS body END
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 53
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 27

    (29) return_stmt -> RETURN . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 54
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 28

    (30) call_stmt -> ID . params
    (54) params -> . expr
    (55) params -> . params expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    params                         shift and go to state 55
    expr                           shift and go to state 56
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 29

    (31) createfile_stmt -> CREATE . FILE NAME IT expr ADD CONTENT expr PLACE IN expr END

    FILE            shift and go to state 57


state 30

    (32) readfile_stmt -> READ . FILE expr

    FILE            shift and go to state 58


state 31

    (17) var_stmt -> SET . ID

    ID              shift and go to state 59


state 32

    (23) repeat -> REPEAT . expr TIMES USING expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 60
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 33

    (2) body -> body stmt .

    OUTPUT          reduce using rule 2 (body -> body stmt .)
    IF              reduce using rule 2 (body -> body stmt .)
    ASK             reduce using rule 2 (body -> body stmt .)
    WHILE           reduce using rule 2 (body -> body stmt .)
    PAUSE           reduce using rule 2 (body -> body stmt .)
    FOREVER         reduce using rule 2 (body -> body stmt .)
    EXIT            reduce using rule 2 (body -> body stmt .)
    FUNCTION        reduce using rule 2 (body -> body stmt .)
    RETURN          reduce using rule 2 (body -> body stmt .)
    ID              reduce using rule 2 (body -> body stmt .)
    CREATE          reduce using rule 2 (body -> body stmt .)
    READ            reduce using rule 2 (body -> body stmt .)
    SET             reduce using rule 2 (body -> body stmt .)
    REPEAT          reduce using rule 2 (body -> body stmt .)
    $end            reduce using rule 2 (body -> body stmt .)
    END             reduce using rule 2 (body -> body stmt .)


state 34

    (18) set_stmt -> var_stmt TO . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 61
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 35

    (19) output_stmt -> OUTPUT expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    OUTPUT          reduce using rule 19 (output_stmt -> OUTPUT expr .)
    IF              reduce using rule 19 (output_stmt -> OUTPUT expr .)
    ASK             reduce using rule 19 (output_stmt -> OUTPUT expr .)
    WHILE           reduce using rule 19 (output_stmt -> OUTPUT expr .)
    PAUSE           reduce using rule 19 (output_stmt -> OUTPUT expr .)
    FOREVER         reduce using rule 19 (output_stmt -> OUTPUT expr .)
    EXIT            reduce using rule 19 (output_stmt -> OUTPUT expr .)
    FUNCTION        reduce using rule 19 (output_stmt -> OUTPUT expr .)
    RETURN          reduce using rule 19 (output_stmt -> OUTPUT expr .)
    ID              reduce using rule 19 (output_stmt -> OUTPUT expr .)
    CREATE          reduce using rule 19 (output_stmt -> OUTPUT expr .)
    READ            reduce using rule 19 (output_stmt -> OUTPUT expr .)
    SET             reduce using rule 19 (output_stmt -> OUTPUT expr .)
    REPEAT          reduce using rule 19 (output_stmt -> OUTPUT expr .)
    $end            reduce using rule 19 (output_stmt -> OUTPUT expr .)
    END             reduce using rule 19 (output_stmt -> OUTPUT expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 36

    (33) expr -> binop .

    PLUS            reduce using rule 33 (expr -> binop .)
    MINUS           reduce using rule 33 (expr -> binop .)
    MULTIPLY        reduce using rule 33 (expr -> binop .)
    DIVIDE          reduce using rule 33 (expr -> binop .)
    GT              reduce using rule 33 (expr -> binop .)
    LT              reduce using rule 33 (expr -> binop .)
    ET              reduce using rule 33 (expr -> binop .)
    GTE             reduce using rule 33 (expr -> binop .)
    LTE             reduce using rule 33 (expr -> binop .)
    NE              reduce using rule 33 (expr -> binop .)
    OUTPUT          reduce using rule 33 (expr -> binop .)
    IF              reduce using rule 33 (expr -> binop .)
    ASK             reduce using rule 33 (expr -> binop .)
    WHILE           reduce using rule 33 (expr -> binop .)
    PAUSE           reduce using rule 33 (expr -> binop .)
    FOREVER         reduce using rule 33 (expr -> binop .)
    EXIT            reduce using rule 33 (expr -> binop .)
    FUNCTION        reduce using rule 33 (expr -> binop .)
    RETURN          reduce using rule 33 (expr -> binop .)
    ID              reduce using rule 33 (expr -> binop .)
    CREATE          reduce using rule 33 (expr -> binop .)
    READ            reduce using rule 33 (expr -> binop .)
    SET             reduce using rule 33 (expr -> binop .)
    REPEAT          reduce using rule 33 (expr -> binop .)
    $end            reduce using rule 33 (expr -> binop .)
    END             reduce using rule 33 (expr -> binop .)
    THEN            reduce using rule 33 (expr -> binop .)
    WITH            reduce using rule 33 (expr -> binop .)
    CALL            reduce using rule 33 (expr -> binop .)
    DIGIT           reduce using rule 33 (expr -> binop .)
    LPAREN          reduce using rule 33 (expr -> binop .)
    RANDOM          reduce using rule 33 (expr -> binop .)
    TEXT            reduce using rule 33 (expr -> binop .)
    CONVERT         reduce using rule 33 (expr -> binop .)
    TIMES           reduce using rule 33 (expr -> binop .)
    RPAREN          reduce using rule 33 (expr -> binop .)
    TO              reduce using rule 33 (expr -> binop .)
    DO              reduce using rule 33 (expr -> binop .)
    MEANS           reduce using rule 33 (expr -> binop .)
    ADD             reduce using rule 33 (expr -> binop .)
    PLACE           reduce using rule 33 (expr -> binop .)


state 37

    (34) expr -> condition .

    PLUS            reduce using rule 34 (expr -> condition .)
    MINUS           reduce using rule 34 (expr -> condition .)
    MULTIPLY        reduce using rule 34 (expr -> condition .)
    DIVIDE          reduce using rule 34 (expr -> condition .)
    GT              reduce using rule 34 (expr -> condition .)
    LT              reduce using rule 34 (expr -> condition .)
    ET              reduce using rule 34 (expr -> condition .)
    GTE             reduce using rule 34 (expr -> condition .)
    LTE             reduce using rule 34 (expr -> condition .)
    NE              reduce using rule 34 (expr -> condition .)
    OUTPUT          reduce using rule 34 (expr -> condition .)
    IF              reduce using rule 34 (expr -> condition .)
    ASK             reduce using rule 34 (expr -> condition .)
    WHILE           reduce using rule 34 (expr -> condition .)
    PAUSE           reduce using rule 34 (expr -> condition .)
    FOREVER         reduce using rule 34 (expr -> condition .)
    EXIT            reduce using rule 34 (expr -> condition .)
    FUNCTION        reduce using rule 34 (expr -> condition .)
    RETURN          reduce using rule 34 (expr -> condition .)
    ID              reduce using rule 34 (expr -> condition .)
    CREATE          reduce using rule 34 (expr -> condition .)
    READ            reduce using rule 34 (expr -> condition .)
    SET             reduce using rule 34 (expr -> condition .)
    REPEAT          reduce using rule 34 (expr -> condition .)
    $end            reduce using rule 34 (expr -> condition .)
    END             reduce using rule 34 (expr -> condition .)
    THEN            reduce using rule 34 (expr -> condition .)
    WITH            reduce using rule 34 (expr -> condition .)
    CALL            reduce using rule 34 (expr -> condition .)
    DIGIT           reduce using rule 34 (expr -> condition .)
    LPAREN          reduce using rule 34 (expr -> condition .)
    RANDOM          reduce using rule 34 (expr -> condition .)
    TEXT            reduce using rule 34 (expr -> condition .)
    CONVERT         reduce using rule 34 (expr -> condition .)
    TIMES           reduce using rule 34 (expr -> condition .)
    RPAREN          reduce using rule 34 (expr -> condition .)
    TO              reduce using rule 34 (expr -> condition .)
    DO              reduce using rule 34 (expr -> condition .)
    MEANS           reduce using rule 34 (expr -> condition .)
    ADD             reduce using rule 34 (expr -> condition .)
    PLACE           reduce using rule 34 (expr -> condition .)


state 38

    (35) expr -> CALL . expr params
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 72
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 39

    (46) expr -> DIGIT .

    PLUS            reduce using rule 46 (expr -> DIGIT .)
    MINUS           reduce using rule 46 (expr -> DIGIT .)
    MULTIPLY        reduce using rule 46 (expr -> DIGIT .)
    DIVIDE          reduce using rule 46 (expr -> DIGIT .)
    GT              reduce using rule 46 (expr -> DIGIT .)
    LT              reduce using rule 46 (expr -> DIGIT .)
    ET              reduce using rule 46 (expr -> DIGIT .)
    GTE             reduce using rule 46 (expr -> DIGIT .)
    LTE             reduce using rule 46 (expr -> DIGIT .)
    NE              reduce using rule 46 (expr -> DIGIT .)
    OUTPUT          reduce using rule 46 (expr -> DIGIT .)
    IF              reduce using rule 46 (expr -> DIGIT .)
    ASK             reduce using rule 46 (expr -> DIGIT .)
    WHILE           reduce using rule 46 (expr -> DIGIT .)
    PAUSE           reduce using rule 46 (expr -> DIGIT .)
    FOREVER         reduce using rule 46 (expr -> DIGIT .)
    EXIT            reduce using rule 46 (expr -> DIGIT .)
    FUNCTION        reduce using rule 46 (expr -> DIGIT .)
    RETURN          reduce using rule 46 (expr -> DIGIT .)
    ID              reduce using rule 46 (expr -> DIGIT .)
    CREATE          reduce using rule 46 (expr -> DIGIT .)
    READ            reduce using rule 46 (expr -> DIGIT .)
    SET             reduce using rule 46 (expr -> DIGIT .)
    REPEAT          reduce using rule 46 (expr -> DIGIT .)
    $end            reduce using rule 46 (expr -> DIGIT .)
    END             reduce using rule 46 (expr -> DIGIT .)
    THEN            reduce using rule 46 (expr -> DIGIT .)
    WITH            reduce using rule 46 (expr -> DIGIT .)
    CALL            reduce using rule 46 (expr -> DIGIT .)
    DIGIT           reduce using rule 46 (expr -> DIGIT .)
    LPAREN          reduce using rule 46 (expr -> DIGIT .)
    RANDOM          reduce using rule 46 (expr -> DIGIT .)
    TEXT            reduce using rule 46 (expr -> DIGIT .)
    CONVERT         reduce using rule 46 (expr -> DIGIT .)
    TIMES           reduce using rule 46 (expr -> DIGIT .)
    RPAREN          reduce using rule 46 (expr -> DIGIT .)
    TO              reduce using rule 46 (expr -> DIGIT .)
    DO              reduce using rule 46 (expr -> DIGIT .)
    MEANS           reduce using rule 46 (expr -> DIGIT .)
    ADD             reduce using rule 46 (expr -> DIGIT .)
    PLACE           reduce using rule 46 (expr -> DIGIT .)


state 40

    (47) expr -> ID .

    PLUS            reduce using rule 47 (expr -> ID .)
    MINUS           reduce using rule 47 (expr -> ID .)
    MULTIPLY        reduce using rule 47 (expr -> ID .)
    DIVIDE          reduce using rule 47 (expr -> ID .)
    GT              reduce using rule 47 (expr -> ID .)
    LT              reduce using rule 47 (expr -> ID .)
    ET              reduce using rule 47 (expr -> ID .)
    GTE             reduce using rule 47 (expr -> ID .)
    LTE             reduce using rule 47 (expr -> ID .)
    NE              reduce using rule 47 (expr -> ID .)
    OUTPUT          reduce using rule 47 (expr -> ID .)
    IF              reduce using rule 47 (expr -> ID .)
    ASK             reduce using rule 47 (expr -> ID .)
    WHILE           reduce using rule 47 (expr -> ID .)
    PAUSE           reduce using rule 47 (expr -> ID .)
    FOREVER         reduce using rule 47 (expr -> ID .)
    EXIT            reduce using rule 47 (expr -> ID .)
    FUNCTION        reduce using rule 47 (expr -> ID .)
    RETURN          reduce using rule 47 (expr -> ID .)
    ID              reduce using rule 47 (expr -> ID .)
    CREATE          reduce using rule 47 (expr -> ID .)
    READ            reduce using rule 47 (expr -> ID .)
    SET             reduce using rule 47 (expr -> ID .)
    REPEAT          reduce using rule 47 (expr -> ID .)
    $end            reduce using rule 47 (expr -> ID .)
    END             reduce using rule 47 (expr -> ID .)
    THEN            reduce using rule 47 (expr -> ID .)
    WITH            reduce using rule 47 (expr -> ID .)
    CALL            reduce using rule 47 (expr -> ID .)
    DIGIT           reduce using rule 47 (expr -> ID .)
    LPAREN          reduce using rule 47 (expr -> ID .)
    RANDOM          reduce using rule 47 (expr -> ID .)
    TEXT            reduce using rule 47 (expr -> ID .)
    CONVERT         reduce using rule 47 (expr -> ID .)
    TIMES           reduce using rule 47 (expr -> ID .)
    RPAREN          reduce using rule 47 (expr -> ID .)
    TO              reduce using rule 47 (expr -> ID .)
    DO              reduce using rule 47 (expr -> ID .)
    MEANS           reduce using rule 47 (expr -> ID .)
    ADD             reduce using rule 47 (expr -> ID .)
    PLACE           reduce using rule 47 (expr -> ID .)


state 41

    (48) expr -> LPAREN . expr RPAREN
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 73
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 42

    (49) expr -> RANDOM . NUMBER FROM expr TO expr

    NUMBER          shift and go to state 74


state 43

    (50) expr -> TEXT .

    PLUS            reduce using rule 50 (expr -> TEXT .)
    MINUS           reduce using rule 50 (expr -> TEXT .)
    MULTIPLY        reduce using rule 50 (expr -> TEXT .)
    DIVIDE          reduce using rule 50 (expr -> TEXT .)
    GT              reduce using rule 50 (expr -> TEXT .)
    LT              reduce using rule 50 (expr -> TEXT .)
    ET              reduce using rule 50 (expr -> TEXT .)
    GTE             reduce using rule 50 (expr -> TEXT .)
    LTE             reduce using rule 50 (expr -> TEXT .)
    NE              reduce using rule 50 (expr -> TEXT .)
    OUTPUT          reduce using rule 50 (expr -> TEXT .)
    IF              reduce using rule 50 (expr -> TEXT .)
    ASK             reduce using rule 50 (expr -> TEXT .)
    WHILE           reduce using rule 50 (expr -> TEXT .)
    PAUSE           reduce using rule 50 (expr -> TEXT .)
    FOREVER         reduce using rule 50 (expr -> TEXT .)
    EXIT            reduce using rule 50 (expr -> TEXT .)
    FUNCTION        reduce using rule 50 (expr -> TEXT .)
    RETURN          reduce using rule 50 (expr -> TEXT .)
    ID              reduce using rule 50 (expr -> TEXT .)
    CREATE          reduce using rule 50 (expr -> TEXT .)
    READ            reduce using rule 50 (expr -> TEXT .)
    SET             reduce using rule 50 (expr -> TEXT .)
    REPEAT          reduce using rule 50 (expr -> TEXT .)
    $end            reduce using rule 50 (expr -> TEXT .)
    END             reduce using rule 50 (expr -> TEXT .)
    THEN            reduce using rule 50 (expr -> TEXT .)
    WITH            reduce using rule 50 (expr -> TEXT .)
    CALL            reduce using rule 50 (expr -> TEXT .)
    DIGIT           reduce using rule 50 (expr -> TEXT .)
    LPAREN          reduce using rule 50 (expr -> TEXT .)
    RANDOM          reduce using rule 50 (expr -> TEXT .)
    TEXT            reduce using rule 50 (expr -> TEXT .)
    CONVERT         reduce using rule 50 (expr -> TEXT .)
    TIMES           reduce using rule 50 (expr -> TEXT .)
    RPAREN          reduce using rule 50 (expr -> TEXT .)
    TO              reduce using rule 50 (expr -> TEXT .)
    DO              reduce using rule 50 (expr -> TEXT .)
    MEANS           reduce using rule 50 (expr -> TEXT .)
    ADD             reduce using rule 50 (expr -> TEXT .)
    PLACE           reduce using rule 50 (expr -> TEXT .)


state 44

    (51) expr -> CONVERT . expr TO datatype
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 75
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 45

    (20) if_then_stmt -> IF expr . THEN body END
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    THEN            shift and go to state 76
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 46

    (21) input_stmt -> ASK expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    OUTPUT          reduce using rule 21 (input_stmt -> ASK expr .)
    IF              reduce using rule 21 (input_stmt -> ASK expr .)
    ASK             reduce using rule 21 (input_stmt -> ASK expr .)
    WHILE           reduce using rule 21 (input_stmt -> ASK expr .)
    PAUSE           reduce using rule 21 (input_stmt -> ASK expr .)
    FOREVER         reduce using rule 21 (input_stmt -> ASK expr .)
    EXIT            reduce using rule 21 (input_stmt -> ASK expr .)
    FUNCTION        reduce using rule 21 (input_stmt -> ASK expr .)
    RETURN          reduce using rule 21 (input_stmt -> ASK expr .)
    ID              reduce using rule 21 (input_stmt -> ASK expr .)
    CREATE          reduce using rule 21 (input_stmt -> ASK expr .)
    READ            reduce using rule 21 (input_stmt -> ASK expr .)
    SET             reduce using rule 21 (input_stmt -> ASK expr .)
    REPEAT          reduce using rule 21 (input_stmt -> ASK expr .)
    $end            reduce using rule 21 (input_stmt -> ASK expr .)
    END             reduce using rule 21 (input_stmt -> ASK expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 47

    (22) while_stmt -> WHILE condition . DO body END
    (34) expr -> condition .

    DO              shift and go to state 77
    GT              reduce using rule 34 (expr -> condition .)
    LT              reduce using rule 34 (expr -> condition .)
    ET              reduce using rule 34 (expr -> condition .)
    GTE             reduce using rule 34 (expr -> condition .)
    LTE             reduce using rule 34 (expr -> condition .)
    NE              reduce using rule 34 (expr -> condition .)
    PLUS            reduce using rule 34 (expr -> condition .)
    MINUS           reduce using rule 34 (expr -> condition .)
    MULTIPLY        reduce using rule 34 (expr -> condition .)
    DIVIDE          reduce using rule 34 (expr -> condition .)


state 48

    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr

    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65


state 49

    (24) repeat_stmt -> repeat body . END
    (2) body -> body . stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    END             shift and go to state 78
    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    repeat                         shift and go to state 22
    stmt                           shift and go to state 33
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17

state 50

    (25) pause_stmt -> PAUSE expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    OUTPUT          reduce using rule 25 (pause_stmt -> PAUSE expr .)
    IF              reduce using rule 25 (pause_stmt -> PAUSE expr .)
    ASK             reduce using rule 25 (pause_stmt -> PAUSE expr .)
    WHILE           reduce using rule 25 (pause_stmt -> PAUSE expr .)
    PAUSE           reduce using rule 25 (pause_stmt -> PAUSE expr .)
    FOREVER         reduce using rule 25 (pause_stmt -> PAUSE expr .)
    EXIT            reduce using rule 25 (pause_stmt -> PAUSE expr .)
    FUNCTION        reduce using rule 25 (pause_stmt -> PAUSE expr .)
    RETURN          reduce using rule 25 (pause_stmt -> PAUSE expr .)
    ID              reduce using rule 25 (pause_stmt -> PAUSE expr .)
    CREATE          reduce using rule 25 (pause_stmt -> PAUSE expr .)
    READ            reduce using rule 25 (pause_stmt -> PAUSE expr .)
    SET             reduce using rule 25 (pause_stmt -> PAUSE expr .)
    REPEAT          reduce using rule 25 (pause_stmt -> PAUSE expr .)
    $end            reduce using rule 25 (pause_stmt -> PAUSE expr .)
    END             reduce using rule 25 (pause_stmt -> PAUSE expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 51

    (26) forever_stmt -> FOREVER DO . body END
    (1) body -> . stmt
    (2) body -> . body stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    body                           shift and go to state 79
    stmt                           shift and go to state 2
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 52

    (27) exit_stmt -> EXIT LOOP .

    OUTPUT          reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    IF              reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    ASK             reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    WHILE           reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    PAUSE           reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    FOREVER         reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    EXIT            reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    FUNCTION        reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    RETURN          reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    ID              reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    CREATE          reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    READ            reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    SET             reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    REPEAT          reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    $end            reduce using rule 27 (exit_stmt -> EXIT LOOP .)
    END             reduce using rule 27 (exit_stmt -> EXIT LOOP .)


state 53

    (28) function_stmt -> FUNCTION expr . WITH params MEANS body END
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    WITH            shift and go to state 80
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 54

    (29) return_stmt -> RETURN expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    OUTPUT          reduce using rule 29 (return_stmt -> RETURN expr .)
    IF              reduce using rule 29 (return_stmt -> RETURN expr .)
    ASK             reduce using rule 29 (return_stmt -> RETURN expr .)
    WHILE           reduce using rule 29 (return_stmt -> RETURN expr .)
    PAUSE           reduce using rule 29 (return_stmt -> RETURN expr .)
    FOREVER         reduce using rule 29 (return_stmt -> RETURN expr .)
    EXIT            reduce using rule 29 (return_stmt -> RETURN expr .)
    FUNCTION        reduce using rule 29 (return_stmt -> RETURN expr .)
    RETURN          reduce using rule 29 (return_stmt -> RETURN expr .)
    ID              reduce using rule 29 (return_stmt -> RETURN expr .)
    CREATE          reduce using rule 29 (return_stmt -> RETURN expr .)
    READ            reduce using rule 29 (return_stmt -> RETURN expr .)
    SET             reduce using rule 29 (return_stmt -> RETURN expr .)
    REPEAT          reduce using rule 29 (return_stmt -> RETURN expr .)
    $end            reduce using rule 29 (return_stmt -> RETURN expr .)
    END             reduce using rule 29 (return_stmt -> RETURN expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 55

    (30) call_stmt -> ID params .
    (55) params -> params . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

  ! shift/reduce conflict for ID resolved as shift
    OUTPUT          reduce using rule 30 (call_stmt -> ID params .)
    IF              reduce using rule 30 (call_stmt -> ID params .)
    ASK             reduce using rule 30 (call_stmt -> ID params .)
    WHILE           reduce using rule 30 (call_stmt -> ID params .)
    PAUSE           reduce using rule 30 (call_stmt -> ID params .)
    FOREVER         reduce using rule 30 (call_stmt -> ID params .)
    EXIT            reduce using rule 30 (call_stmt -> ID params .)
    FUNCTION        reduce using rule 30 (call_stmt -> ID params .)
    RETURN          reduce using rule 30 (call_stmt -> ID params .)
    CREATE          reduce using rule 30 (call_stmt -> ID params .)
    READ            reduce using rule 30 (call_stmt -> ID params .)
    SET             reduce using rule 30 (call_stmt -> ID params .)
    REPEAT          reduce using rule 30 (call_stmt -> ID params .)
    $end            reduce using rule 30 (call_stmt -> ID params .)
    END             reduce using rule 30 (call_stmt -> ID params .)
    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

  ! ID              [ reduce using rule 30 (call_stmt -> ID params .) ]

    expr                           shift and go to state 81
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 56

    (54) params -> expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    CALL            reduce using rule 54 (params -> expr .)
    DIGIT           reduce using rule 54 (params -> expr .)
    ID              reduce using rule 54 (params -> expr .)
    LPAREN          reduce using rule 54 (params -> expr .)
    RANDOM          reduce using rule 54 (params -> expr .)
    TEXT            reduce using rule 54 (params -> expr .)
    CONVERT         reduce using rule 54 (params -> expr .)
    OUTPUT          reduce using rule 54 (params -> expr .)
    IF              reduce using rule 54 (params -> expr .)
    ASK             reduce using rule 54 (params -> expr .)
    WHILE           reduce using rule 54 (params -> expr .)
    PAUSE           reduce using rule 54 (params -> expr .)
    FOREVER         reduce using rule 54 (params -> expr .)
    EXIT            reduce using rule 54 (params -> expr .)
    FUNCTION        reduce using rule 54 (params -> expr .)
    RETURN          reduce using rule 54 (params -> expr .)
    CREATE          reduce using rule 54 (params -> expr .)
    READ            reduce using rule 54 (params -> expr .)
    SET             reduce using rule 54 (params -> expr .)
    REPEAT          reduce using rule 54 (params -> expr .)
    $end            reduce using rule 54 (params -> expr .)
    END             reduce using rule 54 (params -> expr .)
    THEN            reduce using rule 54 (params -> expr .)
    WITH            reduce using rule 54 (params -> expr .)
    TIMES           reduce using rule 54 (params -> expr .)
    RPAREN          reduce using rule 54 (params -> expr .)
    TO              reduce using rule 54 (params -> expr .)
    DO              reduce using rule 54 (params -> expr .)
    MEANS           reduce using rule 54 (params -> expr .)
    ADD             reduce using rule 54 (params -> expr .)
    PLACE           reduce using rule 54 (params -> expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 54 (params -> expr .) ]
  ! MINUS           [ reduce using rule 54 (params -> expr .) ]
  ! MULTIPLY        [ reduce using rule 54 (params -> expr .) ]
  ! DIVIDE          [ reduce using rule 54 (params -> expr .) ]
  ! GT              [ reduce using rule 54 (params -> expr .) ]
  ! LT              [ reduce using rule 54 (params -> expr .) ]
  ! ET              [ reduce using rule 54 (params -> expr .) ]
  ! GTE             [ reduce using rule 54 (params -> expr .) ]
  ! LTE             [ reduce using rule 54 (params -> expr .) ]
  ! NE              [ reduce using rule 54 (params -> expr .) ]


state 57

    (31) createfile_stmt -> CREATE FILE . NAME IT expr ADD CONTENT expr PLACE IN expr END

    NAME            shift and go to state 82


state 58

    (32) readfile_stmt -> READ FILE . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 83
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 59

    (17) var_stmt -> SET ID .

    TO              reduce using rule 17 (var_stmt -> SET ID .)


state 60

    (23) repeat -> REPEAT expr . TIMES USING expr
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    TIMES           shift and go to state 84
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 61

    (18) set_stmt -> var_stmt TO expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    OUTPUT          reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    IF              reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    ASK             reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    WHILE           reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    PAUSE           reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    FOREVER         reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    EXIT            reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    FUNCTION        reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    RETURN          reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    ID              reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    CREATE          reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    READ            reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    SET             reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    REPEAT          reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    $end            reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    END             reduce using rule 18 (set_stmt -> var_stmt TO expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 62

    (36) binop -> expr PLUS . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 85
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 63

    (37) binop -> expr MINUS . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 86
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 64

    (38) binop -> expr MULTIPLY . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 87
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 65

    (39) binop -> expr DIVIDE . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 88
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 66

    (40) condition -> expr GT . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 89
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 67

    (41) condition -> expr LT . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 90
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 68

    (42) condition -> expr ET . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 91
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 69

    (43) condition -> expr GTE . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 92
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 70

    (44) condition -> expr LTE . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 93
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 71

    (45) condition -> expr NE . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 94
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 72

    (35) expr -> CALL expr . params
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr
    (54) params -> . expr
    (55) params -> . params expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 56
    params                         shift and go to state 95
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 73

    (48) expr -> LPAREN expr . RPAREN
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    RPAREN          shift and go to state 96
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 74

    (49) expr -> RANDOM NUMBER . FROM expr TO expr

    FROM            shift and go to state 97


state 75

    (51) expr -> CONVERT expr . TO datatype
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    TO              shift and go to state 98
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 76

    (20) if_then_stmt -> IF expr THEN . body END
    (1) body -> . stmt
    (2) body -> . body stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    body                           shift and go to state 99
    stmt                           shift and go to state 2
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 77

    (22) while_stmt -> WHILE condition DO . body END
    (1) body -> . stmt
    (2) body -> . body stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    body                           shift and go to state 100
    stmt                           shift and go to state 2
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 78

    (24) repeat_stmt -> repeat body END .

    OUTPUT          reduce using rule 24 (repeat_stmt -> repeat body END .)
    IF              reduce using rule 24 (repeat_stmt -> repeat body END .)
    ASK             reduce using rule 24 (repeat_stmt -> repeat body END .)
    WHILE           reduce using rule 24 (repeat_stmt -> repeat body END .)
    PAUSE           reduce using rule 24 (repeat_stmt -> repeat body END .)
    FOREVER         reduce using rule 24 (repeat_stmt -> repeat body END .)
    EXIT            reduce using rule 24 (repeat_stmt -> repeat body END .)
    FUNCTION        reduce using rule 24 (repeat_stmt -> repeat body END .)
    RETURN          reduce using rule 24 (repeat_stmt -> repeat body END .)
    ID              reduce using rule 24 (repeat_stmt -> repeat body END .)
    CREATE          reduce using rule 24 (repeat_stmt -> repeat body END .)
    READ            reduce using rule 24 (repeat_stmt -> repeat body END .)
    SET             reduce using rule 24 (repeat_stmt -> repeat body END .)
    REPEAT          reduce using rule 24 (repeat_stmt -> repeat body END .)
    $end            reduce using rule 24 (repeat_stmt -> repeat body END .)
    END             reduce using rule 24 (repeat_stmt -> repeat body END .)


state 79

    (26) forever_stmt -> FOREVER DO body . END
    (2) body -> body . stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    END             shift and go to state 101
    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    stmt                           shift and go to state 33
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 80

    (28) function_stmt -> FUNCTION expr WITH . params MEANS body END
    (54) params -> . expr
    (55) params -> . params expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 56
    params                         shift and go to state 102
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 81

    (55) params -> params expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    CALL            reduce using rule 55 (params -> params expr .)
    DIGIT           reduce using rule 55 (params -> params expr .)
    ID              reduce using rule 55 (params -> params expr .)
    LPAREN          reduce using rule 55 (params -> params expr .)
    RANDOM          reduce using rule 55 (params -> params expr .)
    TEXT            reduce using rule 55 (params -> params expr .)
    CONVERT         reduce using rule 55 (params -> params expr .)
    OUTPUT          reduce using rule 55 (params -> params expr .)
    IF              reduce using rule 55 (params -> params expr .)
    ASK             reduce using rule 55 (params -> params expr .)
    WHILE           reduce using rule 55 (params -> params expr .)
    PAUSE           reduce using rule 55 (params -> params expr .)
    FOREVER         reduce using rule 55 (params -> params expr .)
    EXIT            reduce using rule 55 (params -> params expr .)
    FUNCTION        reduce using rule 55 (params -> params expr .)
    RETURN          reduce using rule 55 (params -> params expr .)
    CREATE          reduce using rule 55 (params -> params expr .)
    READ            reduce using rule 55 (params -> params expr .)
    SET             reduce using rule 55 (params -> params expr .)
    REPEAT          reduce using rule 55 (params -> params expr .)
    $end            reduce using rule 55 (params -> params expr .)
    END             reduce using rule 55 (params -> params expr .)
    THEN            reduce using rule 55 (params -> params expr .)
    WITH            reduce using rule 55 (params -> params expr .)
    TIMES           reduce using rule 55 (params -> params expr .)
    RPAREN          reduce using rule 55 (params -> params expr .)
    TO              reduce using rule 55 (params -> params expr .)
    DO              reduce using rule 55 (params -> params expr .)
    MEANS           reduce using rule 55 (params -> params expr .)
    ADD             reduce using rule 55 (params -> params expr .)
    PLACE           reduce using rule 55 (params -> params expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 55 (params -> params expr .) ]
  ! MINUS           [ reduce using rule 55 (params -> params expr .) ]
  ! MULTIPLY        [ reduce using rule 55 (params -> params expr .) ]
  ! DIVIDE          [ reduce using rule 55 (params -> params expr .) ]
  ! GT              [ reduce using rule 55 (params -> params expr .) ]
  ! LT              [ reduce using rule 55 (params -> params expr .) ]
  ! ET              [ reduce using rule 55 (params -> params expr .) ]
  ! GTE             [ reduce using rule 55 (params -> params expr .) ]
  ! LTE             [ reduce using rule 55 (params -> params expr .) ]
  ! NE              [ reduce using rule 55 (params -> params expr .) ]


state 82

    (31) createfile_stmt -> CREATE FILE NAME . IT expr ADD CONTENT expr PLACE IN expr END

    IT              shift and go to state 103


state 83

    (32) readfile_stmt -> READ FILE expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    OUTPUT          reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    IF              reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    ASK             reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    WHILE           reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    PAUSE           reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    FOREVER         reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    EXIT            reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    FUNCTION        reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    RETURN          reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    ID              reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    CREATE          reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    READ            reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    SET             reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    REPEAT          reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    $end            reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    END             reduce using rule 32 (readfile_stmt -> READ FILE expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 84

    (23) repeat -> REPEAT expr TIMES . USING expr

    USING           shift and go to state 104


state 85

    (36) binop -> expr PLUS expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 36 (binop -> expr PLUS expr .)
    IF              reduce using rule 36 (binop -> expr PLUS expr .)
    ASK             reduce using rule 36 (binop -> expr PLUS expr .)
    WHILE           reduce using rule 36 (binop -> expr PLUS expr .)
    PAUSE           reduce using rule 36 (binop -> expr PLUS expr .)
    FOREVER         reduce using rule 36 (binop -> expr PLUS expr .)
    EXIT            reduce using rule 36 (binop -> expr PLUS expr .)
    FUNCTION        reduce using rule 36 (binop -> expr PLUS expr .)
    RETURN          reduce using rule 36 (binop -> expr PLUS expr .)
    ID              reduce using rule 36 (binop -> expr PLUS expr .)
    CREATE          reduce using rule 36 (binop -> expr PLUS expr .)
    READ            reduce using rule 36 (binop -> expr PLUS expr .)
    SET             reduce using rule 36 (binop -> expr PLUS expr .)
    REPEAT          reduce using rule 36 (binop -> expr PLUS expr .)
    $end            reduce using rule 36 (binop -> expr PLUS expr .)
    END             reduce using rule 36 (binop -> expr PLUS expr .)
    THEN            reduce using rule 36 (binop -> expr PLUS expr .)
    WITH            reduce using rule 36 (binop -> expr PLUS expr .)
    CALL            reduce using rule 36 (binop -> expr PLUS expr .)
    DIGIT           reduce using rule 36 (binop -> expr PLUS expr .)
    LPAREN          reduce using rule 36 (binop -> expr PLUS expr .)
    RANDOM          reduce using rule 36 (binop -> expr PLUS expr .)
    TEXT            reduce using rule 36 (binop -> expr PLUS expr .)
    CONVERT         reduce using rule 36 (binop -> expr PLUS expr .)
    TIMES           reduce using rule 36 (binop -> expr PLUS expr .)
    RPAREN          reduce using rule 36 (binop -> expr PLUS expr .)
    TO              reduce using rule 36 (binop -> expr PLUS expr .)
    DO              reduce using rule 36 (binop -> expr PLUS expr .)
    MEANS           reduce using rule 36 (binop -> expr PLUS expr .)
    ADD             reduce using rule 36 (binop -> expr PLUS expr .)
    PLACE           reduce using rule 36 (binop -> expr PLUS expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! MULTIPLY        [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! ET              [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! GTE             [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! LTE             [ reduce using rule 36 (binop -> expr PLUS expr .) ]
  ! NE              [ reduce using rule 36 (binop -> expr PLUS expr .) ]


state 86

    (37) binop -> expr MINUS expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 37 (binop -> expr MINUS expr .)
    IF              reduce using rule 37 (binop -> expr MINUS expr .)
    ASK             reduce using rule 37 (binop -> expr MINUS expr .)
    WHILE           reduce using rule 37 (binop -> expr MINUS expr .)
    PAUSE           reduce using rule 37 (binop -> expr MINUS expr .)
    FOREVER         reduce using rule 37 (binop -> expr MINUS expr .)
    EXIT            reduce using rule 37 (binop -> expr MINUS expr .)
    FUNCTION        reduce using rule 37 (binop -> expr MINUS expr .)
    RETURN          reduce using rule 37 (binop -> expr MINUS expr .)
    ID              reduce using rule 37 (binop -> expr MINUS expr .)
    CREATE          reduce using rule 37 (binop -> expr MINUS expr .)
    READ            reduce using rule 37 (binop -> expr MINUS expr .)
    SET             reduce using rule 37 (binop -> expr MINUS expr .)
    REPEAT          reduce using rule 37 (binop -> expr MINUS expr .)
    $end            reduce using rule 37 (binop -> expr MINUS expr .)
    END             reduce using rule 37 (binop -> expr MINUS expr .)
    THEN            reduce using rule 37 (binop -> expr MINUS expr .)
    WITH            reduce using rule 37 (binop -> expr MINUS expr .)
    CALL            reduce using rule 37 (binop -> expr MINUS expr .)
    DIGIT           reduce using rule 37 (binop -> expr MINUS expr .)
    LPAREN          reduce using rule 37 (binop -> expr MINUS expr .)
    RANDOM          reduce using rule 37 (binop -> expr MINUS expr .)
    TEXT            reduce using rule 37 (binop -> expr MINUS expr .)
    CONVERT         reduce using rule 37 (binop -> expr MINUS expr .)
    TIMES           reduce using rule 37 (binop -> expr MINUS expr .)
    RPAREN          reduce using rule 37 (binop -> expr MINUS expr .)
    TO              reduce using rule 37 (binop -> expr MINUS expr .)
    DO              reduce using rule 37 (binop -> expr MINUS expr .)
    MEANS           reduce using rule 37 (binop -> expr MINUS expr .)
    ADD             reduce using rule 37 (binop -> expr MINUS expr .)
    PLACE           reduce using rule 37 (binop -> expr MINUS expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! MULTIPLY        [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! ET              [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! GTE             [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! LTE             [ reduce using rule 37 (binop -> expr MINUS expr .) ]
  ! NE              [ reduce using rule 37 (binop -> expr MINUS expr .) ]


state 87

    (38) binop -> expr MULTIPLY expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 38 (binop -> expr MULTIPLY expr .)
    IF              reduce using rule 38 (binop -> expr MULTIPLY expr .)
    ASK             reduce using rule 38 (binop -> expr MULTIPLY expr .)
    WHILE           reduce using rule 38 (binop -> expr MULTIPLY expr .)
    PAUSE           reduce using rule 38 (binop -> expr MULTIPLY expr .)
    FOREVER         reduce using rule 38 (binop -> expr MULTIPLY expr .)
    EXIT            reduce using rule 38 (binop -> expr MULTIPLY expr .)
    FUNCTION        reduce using rule 38 (binop -> expr MULTIPLY expr .)
    RETURN          reduce using rule 38 (binop -> expr MULTIPLY expr .)
    ID              reduce using rule 38 (binop -> expr MULTIPLY expr .)
    CREATE          reduce using rule 38 (binop -> expr MULTIPLY expr .)
    READ            reduce using rule 38 (binop -> expr MULTIPLY expr .)
    SET             reduce using rule 38 (binop -> expr MULTIPLY expr .)
    REPEAT          reduce using rule 38 (binop -> expr MULTIPLY expr .)
    $end            reduce using rule 38 (binop -> expr MULTIPLY expr .)
    END             reduce using rule 38 (binop -> expr MULTIPLY expr .)
    THEN            reduce using rule 38 (binop -> expr MULTIPLY expr .)
    WITH            reduce using rule 38 (binop -> expr MULTIPLY expr .)
    CALL            reduce using rule 38 (binop -> expr MULTIPLY expr .)
    DIGIT           reduce using rule 38 (binop -> expr MULTIPLY expr .)
    LPAREN          reduce using rule 38 (binop -> expr MULTIPLY expr .)
    RANDOM          reduce using rule 38 (binop -> expr MULTIPLY expr .)
    TEXT            reduce using rule 38 (binop -> expr MULTIPLY expr .)
    CONVERT         reduce using rule 38 (binop -> expr MULTIPLY expr .)
    TIMES           reduce using rule 38 (binop -> expr MULTIPLY expr .)
    RPAREN          reduce using rule 38 (binop -> expr MULTIPLY expr .)
    TO              reduce using rule 38 (binop -> expr MULTIPLY expr .)
    DO              reduce using rule 38 (binop -> expr MULTIPLY expr .)
    MEANS           reduce using rule 38 (binop -> expr MULTIPLY expr .)
    ADD             reduce using rule 38 (binop -> expr MULTIPLY expr .)
    PLACE           reduce using rule 38 (binop -> expr MULTIPLY expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! MINUS           [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! MULTIPLY        [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! DIVIDE          [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! GT              [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! LT              [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! ET              [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! GTE             [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! LTE             [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]
  ! NE              [ reduce using rule 38 (binop -> expr MULTIPLY expr .) ]


state 88

    (39) binop -> expr DIVIDE expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 39 (binop -> expr DIVIDE expr .)
    IF              reduce using rule 39 (binop -> expr DIVIDE expr .)
    ASK             reduce using rule 39 (binop -> expr DIVIDE expr .)
    WHILE           reduce using rule 39 (binop -> expr DIVIDE expr .)
    PAUSE           reduce using rule 39 (binop -> expr DIVIDE expr .)
    FOREVER         reduce using rule 39 (binop -> expr DIVIDE expr .)
    EXIT            reduce using rule 39 (binop -> expr DIVIDE expr .)
    FUNCTION        reduce using rule 39 (binop -> expr DIVIDE expr .)
    RETURN          reduce using rule 39 (binop -> expr DIVIDE expr .)
    ID              reduce using rule 39 (binop -> expr DIVIDE expr .)
    CREATE          reduce using rule 39 (binop -> expr DIVIDE expr .)
    READ            reduce using rule 39 (binop -> expr DIVIDE expr .)
    SET             reduce using rule 39 (binop -> expr DIVIDE expr .)
    REPEAT          reduce using rule 39 (binop -> expr DIVIDE expr .)
    $end            reduce using rule 39 (binop -> expr DIVIDE expr .)
    END             reduce using rule 39 (binop -> expr DIVIDE expr .)
    THEN            reduce using rule 39 (binop -> expr DIVIDE expr .)
    WITH            reduce using rule 39 (binop -> expr DIVIDE expr .)
    CALL            reduce using rule 39 (binop -> expr DIVIDE expr .)
    DIGIT           reduce using rule 39 (binop -> expr DIVIDE expr .)
    LPAREN          reduce using rule 39 (binop -> expr DIVIDE expr .)
    RANDOM          reduce using rule 39 (binop -> expr DIVIDE expr .)
    TEXT            reduce using rule 39 (binop -> expr DIVIDE expr .)
    CONVERT         reduce using rule 39 (binop -> expr DIVIDE expr .)
    TIMES           reduce using rule 39 (binop -> expr DIVIDE expr .)
    RPAREN          reduce using rule 39 (binop -> expr DIVIDE expr .)
    TO              reduce using rule 39 (binop -> expr DIVIDE expr .)
    DO              reduce using rule 39 (binop -> expr DIVIDE expr .)
    MEANS           reduce using rule 39 (binop -> expr DIVIDE expr .)
    ADD             reduce using rule 39 (binop -> expr DIVIDE expr .)
    PLACE           reduce using rule 39 (binop -> expr DIVIDE expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! MULTIPLY        [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! GT              [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! LT              [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! ET              [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! GTE             [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! LTE             [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]
  ! NE              [ reduce using rule 39 (binop -> expr DIVIDE expr .) ]


state 89

    (40) condition -> expr GT expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 40 (condition -> expr GT expr .)
    IF              reduce using rule 40 (condition -> expr GT expr .)
    ASK             reduce using rule 40 (condition -> expr GT expr .)
    WHILE           reduce using rule 40 (condition -> expr GT expr .)
    PAUSE           reduce using rule 40 (condition -> expr GT expr .)
    FOREVER         reduce using rule 40 (condition -> expr GT expr .)
    EXIT            reduce using rule 40 (condition -> expr GT expr .)
    FUNCTION        reduce using rule 40 (condition -> expr GT expr .)
    RETURN          reduce using rule 40 (condition -> expr GT expr .)
    ID              reduce using rule 40 (condition -> expr GT expr .)
    CREATE          reduce using rule 40 (condition -> expr GT expr .)
    READ            reduce using rule 40 (condition -> expr GT expr .)
    SET             reduce using rule 40 (condition -> expr GT expr .)
    REPEAT          reduce using rule 40 (condition -> expr GT expr .)
    $end            reduce using rule 40 (condition -> expr GT expr .)
    END             reduce using rule 40 (condition -> expr GT expr .)
    THEN            reduce using rule 40 (condition -> expr GT expr .)
    DO              reduce using rule 40 (condition -> expr GT expr .)
    WITH            reduce using rule 40 (condition -> expr GT expr .)
    CALL            reduce using rule 40 (condition -> expr GT expr .)
    DIGIT           reduce using rule 40 (condition -> expr GT expr .)
    LPAREN          reduce using rule 40 (condition -> expr GT expr .)
    RANDOM          reduce using rule 40 (condition -> expr GT expr .)
    TEXT            reduce using rule 40 (condition -> expr GT expr .)
    CONVERT         reduce using rule 40 (condition -> expr GT expr .)
    TIMES           reduce using rule 40 (condition -> expr GT expr .)
    RPAREN          reduce using rule 40 (condition -> expr GT expr .)
    TO              reduce using rule 40 (condition -> expr GT expr .)
    MEANS           reduce using rule 40 (condition -> expr GT expr .)
    ADD             reduce using rule 40 (condition -> expr GT expr .)
    PLACE           reduce using rule 40 (condition -> expr GT expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! MULTIPLY        [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! GT              [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! LT              [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! ET              [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! GTE             [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! LTE             [ reduce using rule 40 (condition -> expr GT expr .) ]
  ! NE              [ reduce using rule 40 (condition -> expr GT expr .) ]


state 90

    (41) condition -> expr LT expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 41 (condition -> expr LT expr .)
    IF              reduce using rule 41 (condition -> expr LT expr .)
    ASK             reduce using rule 41 (condition -> expr LT expr .)
    WHILE           reduce using rule 41 (condition -> expr LT expr .)
    PAUSE           reduce using rule 41 (condition -> expr LT expr .)
    FOREVER         reduce using rule 41 (condition -> expr LT expr .)
    EXIT            reduce using rule 41 (condition -> expr LT expr .)
    FUNCTION        reduce using rule 41 (condition -> expr LT expr .)
    RETURN          reduce using rule 41 (condition -> expr LT expr .)
    ID              reduce using rule 41 (condition -> expr LT expr .)
    CREATE          reduce using rule 41 (condition -> expr LT expr .)
    READ            reduce using rule 41 (condition -> expr LT expr .)
    SET             reduce using rule 41 (condition -> expr LT expr .)
    REPEAT          reduce using rule 41 (condition -> expr LT expr .)
    $end            reduce using rule 41 (condition -> expr LT expr .)
    END             reduce using rule 41 (condition -> expr LT expr .)
    THEN            reduce using rule 41 (condition -> expr LT expr .)
    DO              reduce using rule 41 (condition -> expr LT expr .)
    WITH            reduce using rule 41 (condition -> expr LT expr .)
    CALL            reduce using rule 41 (condition -> expr LT expr .)
    DIGIT           reduce using rule 41 (condition -> expr LT expr .)
    LPAREN          reduce using rule 41 (condition -> expr LT expr .)
    RANDOM          reduce using rule 41 (condition -> expr LT expr .)
    TEXT            reduce using rule 41 (condition -> expr LT expr .)
    CONVERT         reduce using rule 41 (condition -> expr LT expr .)
    TIMES           reduce using rule 41 (condition -> expr LT expr .)
    RPAREN          reduce using rule 41 (condition -> expr LT expr .)
    TO              reduce using rule 41 (condition -> expr LT expr .)
    MEANS           reduce using rule 41 (condition -> expr LT expr .)
    ADD             reduce using rule 41 (condition -> expr LT expr .)
    PLACE           reduce using rule 41 (condition -> expr LT expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! MULTIPLY        [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! GT              [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! LT              [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! ET              [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! GTE             [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! LTE             [ reduce using rule 41 (condition -> expr LT expr .) ]
  ! NE              [ reduce using rule 41 (condition -> expr LT expr .) ]


state 91

    (42) condition -> expr ET expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 42 (condition -> expr ET expr .)
    IF              reduce using rule 42 (condition -> expr ET expr .)
    ASK             reduce using rule 42 (condition -> expr ET expr .)
    WHILE           reduce using rule 42 (condition -> expr ET expr .)
    PAUSE           reduce using rule 42 (condition -> expr ET expr .)
    FOREVER         reduce using rule 42 (condition -> expr ET expr .)
    EXIT            reduce using rule 42 (condition -> expr ET expr .)
    FUNCTION        reduce using rule 42 (condition -> expr ET expr .)
    RETURN          reduce using rule 42 (condition -> expr ET expr .)
    ID              reduce using rule 42 (condition -> expr ET expr .)
    CREATE          reduce using rule 42 (condition -> expr ET expr .)
    READ            reduce using rule 42 (condition -> expr ET expr .)
    SET             reduce using rule 42 (condition -> expr ET expr .)
    REPEAT          reduce using rule 42 (condition -> expr ET expr .)
    $end            reduce using rule 42 (condition -> expr ET expr .)
    END             reduce using rule 42 (condition -> expr ET expr .)
    THEN            reduce using rule 42 (condition -> expr ET expr .)
    DO              reduce using rule 42 (condition -> expr ET expr .)
    WITH            reduce using rule 42 (condition -> expr ET expr .)
    CALL            reduce using rule 42 (condition -> expr ET expr .)
    DIGIT           reduce using rule 42 (condition -> expr ET expr .)
    LPAREN          reduce using rule 42 (condition -> expr ET expr .)
    RANDOM          reduce using rule 42 (condition -> expr ET expr .)
    TEXT            reduce using rule 42 (condition -> expr ET expr .)
    CONVERT         reduce using rule 42 (condition -> expr ET expr .)
    TIMES           reduce using rule 42 (condition -> expr ET expr .)
    RPAREN          reduce using rule 42 (condition -> expr ET expr .)
    TO              reduce using rule 42 (condition -> expr ET expr .)
    MEANS           reduce using rule 42 (condition -> expr ET expr .)
    ADD             reduce using rule 42 (condition -> expr ET expr .)
    PLACE           reduce using rule 42 (condition -> expr ET expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! MINUS           [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! MULTIPLY        [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! DIVIDE          [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! GT              [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! LT              [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! ET              [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! GTE             [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! LTE             [ reduce using rule 42 (condition -> expr ET expr .) ]
  ! NE              [ reduce using rule 42 (condition -> expr ET expr .) ]


state 92

    (43) condition -> expr GTE expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 43 (condition -> expr GTE expr .)
    IF              reduce using rule 43 (condition -> expr GTE expr .)
    ASK             reduce using rule 43 (condition -> expr GTE expr .)
    WHILE           reduce using rule 43 (condition -> expr GTE expr .)
    PAUSE           reduce using rule 43 (condition -> expr GTE expr .)
    FOREVER         reduce using rule 43 (condition -> expr GTE expr .)
    EXIT            reduce using rule 43 (condition -> expr GTE expr .)
    FUNCTION        reduce using rule 43 (condition -> expr GTE expr .)
    RETURN          reduce using rule 43 (condition -> expr GTE expr .)
    ID              reduce using rule 43 (condition -> expr GTE expr .)
    CREATE          reduce using rule 43 (condition -> expr GTE expr .)
    READ            reduce using rule 43 (condition -> expr GTE expr .)
    SET             reduce using rule 43 (condition -> expr GTE expr .)
    REPEAT          reduce using rule 43 (condition -> expr GTE expr .)
    $end            reduce using rule 43 (condition -> expr GTE expr .)
    END             reduce using rule 43 (condition -> expr GTE expr .)
    THEN            reduce using rule 43 (condition -> expr GTE expr .)
    DO              reduce using rule 43 (condition -> expr GTE expr .)
    WITH            reduce using rule 43 (condition -> expr GTE expr .)
    CALL            reduce using rule 43 (condition -> expr GTE expr .)
    DIGIT           reduce using rule 43 (condition -> expr GTE expr .)
    LPAREN          reduce using rule 43 (condition -> expr GTE expr .)
    RANDOM          reduce using rule 43 (condition -> expr GTE expr .)
    TEXT            reduce using rule 43 (condition -> expr GTE expr .)
    CONVERT         reduce using rule 43 (condition -> expr GTE expr .)
    TIMES           reduce using rule 43 (condition -> expr GTE expr .)
    RPAREN          reduce using rule 43 (condition -> expr GTE expr .)
    TO              reduce using rule 43 (condition -> expr GTE expr .)
    MEANS           reduce using rule 43 (condition -> expr GTE expr .)
    ADD             reduce using rule 43 (condition -> expr GTE expr .)
    PLACE           reduce using rule 43 (condition -> expr GTE expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! MULTIPLY        [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! DIVIDE          [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! GT              [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! LT              [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! ET              [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! GTE             [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! LTE             [ reduce using rule 43 (condition -> expr GTE expr .) ]
  ! NE              [ reduce using rule 43 (condition -> expr GTE expr .) ]


state 93

    (44) condition -> expr LTE expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 44 (condition -> expr LTE expr .)
    IF              reduce using rule 44 (condition -> expr LTE expr .)
    ASK             reduce using rule 44 (condition -> expr LTE expr .)
    WHILE           reduce using rule 44 (condition -> expr LTE expr .)
    PAUSE           reduce using rule 44 (condition -> expr LTE expr .)
    FOREVER         reduce using rule 44 (condition -> expr LTE expr .)
    EXIT            reduce using rule 44 (condition -> expr LTE expr .)
    FUNCTION        reduce using rule 44 (condition -> expr LTE expr .)
    RETURN          reduce using rule 44 (condition -> expr LTE expr .)
    ID              reduce using rule 44 (condition -> expr LTE expr .)
    CREATE          reduce using rule 44 (condition -> expr LTE expr .)
    READ            reduce using rule 44 (condition -> expr LTE expr .)
    SET             reduce using rule 44 (condition -> expr LTE expr .)
    REPEAT          reduce using rule 44 (condition -> expr LTE expr .)
    $end            reduce using rule 44 (condition -> expr LTE expr .)
    END             reduce using rule 44 (condition -> expr LTE expr .)
    THEN            reduce using rule 44 (condition -> expr LTE expr .)
    DO              reduce using rule 44 (condition -> expr LTE expr .)
    WITH            reduce using rule 44 (condition -> expr LTE expr .)
    CALL            reduce using rule 44 (condition -> expr LTE expr .)
    DIGIT           reduce using rule 44 (condition -> expr LTE expr .)
    LPAREN          reduce using rule 44 (condition -> expr LTE expr .)
    RANDOM          reduce using rule 44 (condition -> expr LTE expr .)
    TEXT            reduce using rule 44 (condition -> expr LTE expr .)
    CONVERT         reduce using rule 44 (condition -> expr LTE expr .)
    TIMES           reduce using rule 44 (condition -> expr LTE expr .)
    RPAREN          reduce using rule 44 (condition -> expr LTE expr .)
    TO              reduce using rule 44 (condition -> expr LTE expr .)
    MEANS           reduce using rule 44 (condition -> expr LTE expr .)
    ADD             reduce using rule 44 (condition -> expr LTE expr .)
    PLACE           reduce using rule 44 (condition -> expr LTE expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! MULTIPLY        [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! DIVIDE          [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! GT              [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! LT              [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! ET              [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! GTE             [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! LTE             [ reduce using rule 44 (condition -> expr LTE expr .) ]
  ! NE              [ reduce using rule 44 (condition -> expr LTE expr .) ]


state 94

    (45) condition -> expr NE expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 45 (condition -> expr NE expr .)
    IF              reduce using rule 45 (condition -> expr NE expr .)
    ASK             reduce using rule 45 (condition -> expr NE expr .)
    WHILE           reduce using rule 45 (condition -> expr NE expr .)
    PAUSE           reduce using rule 45 (condition -> expr NE expr .)
    FOREVER         reduce using rule 45 (condition -> expr NE expr .)
    EXIT            reduce using rule 45 (condition -> expr NE expr .)
    FUNCTION        reduce using rule 45 (condition -> expr NE expr .)
    RETURN          reduce using rule 45 (condition -> expr NE expr .)
    ID              reduce using rule 45 (condition -> expr NE expr .)
    CREATE          reduce using rule 45 (condition -> expr NE expr .)
    READ            reduce using rule 45 (condition -> expr NE expr .)
    SET             reduce using rule 45 (condition -> expr NE expr .)
    REPEAT          reduce using rule 45 (condition -> expr NE expr .)
    $end            reduce using rule 45 (condition -> expr NE expr .)
    END             reduce using rule 45 (condition -> expr NE expr .)
    THEN            reduce using rule 45 (condition -> expr NE expr .)
    DO              reduce using rule 45 (condition -> expr NE expr .)
    WITH            reduce using rule 45 (condition -> expr NE expr .)
    CALL            reduce using rule 45 (condition -> expr NE expr .)
    DIGIT           reduce using rule 45 (condition -> expr NE expr .)
    LPAREN          reduce using rule 45 (condition -> expr NE expr .)
    RANDOM          reduce using rule 45 (condition -> expr NE expr .)
    TEXT            reduce using rule 45 (condition -> expr NE expr .)
    CONVERT         reduce using rule 45 (condition -> expr NE expr .)
    TIMES           reduce using rule 45 (condition -> expr NE expr .)
    RPAREN          reduce using rule 45 (condition -> expr NE expr .)
    TO              reduce using rule 45 (condition -> expr NE expr .)
    MEANS           reduce using rule 45 (condition -> expr NE expr .)
    ADD             reduce using rule 45 (condition -> expr NE expr .)
    PLACE           reduce using rule 45 (condition -> expr NE expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! MULTIPLY        [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! GT              [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! LT              [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! ET              [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! GTE             [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! LTE             [ reduce using rule 45 (condition -> expr NE expr .) ]
  ! NE              [ reduce using rule 45 (condition -> expr NE expr .) ]


state 95

    (35) expr -> CALL expr params .
    (55) params -> params . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

  ! shift/reduce conflict for CALL resolved as shift
  ! shift/reduce conflict for DIGIT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for RANDOM resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for CONVERT resolved as shift
    PLUS            reduce using rule 35 (expr -> CALL expr params .)
    MINUS           reduce using rule 35 (expr -> CALL expr params .)
    MULTIPLY        reduce using rule 35 (expr -> CALL expr params .)
    DIVIDE          reduce using rule 35 (expr -> CALL expr params .)
    GT              reduce using rule 35 (expr -> CALL expr params .)
    LT              reduce using rule 35 (expr -> CALL expr params .)
    ET              reduce using rule 35 (expr -> CALL expr params .)
    GTE             reduce using rule 35 (expr -> CALL expr params .)
    LTE             reduce using rule 35 (expr -> CALL expr params .)
    NE              reduce using rule 35 (expr -> CALL expr params .)
    OUTPUT          reduce using rule 35 (expr -> CALL expr params .)
    IF              reduce using rule 35 (expr -> CALL expr params .)
    ASK             reduce using rule 35 (expr -> CALL expr params .)
    WHILE           reduce using rule 35 (expr -> CALL expr params .)
    PAUSE           reduce using rule 35 (expr -> CALL expr params .)
    FOREVER         reduce using rule 35 (expr -> CALL expr params .)
    EXIT            reduce using rule 35 (expr -> CALL expr params .)
    FUNCTION        reduce using rule 35 (expr -> CALL expr params .)
    RETURN          reduce using rule 35 (expr -> CALL expr params .)
    CREATE          reduce using rule 35 (expr -> CALL expr params .)
    READ            reduce using rule 35 (expr -> CALL expr params .)
    SET             reduce using rule 35 (expr -> CALL expr params .)
    REPEAT          reduce using rule 35 (expr -> CALL expr params .)
    $end            reduce using rule 35 (expr -> CALL expr params .)
    END             reduce using rule 35 (expr -> CALL expr params .)
    THEN            reduce using rule 35 (expr -> CALL expr params .)
    WITH            reduce using rule 35 (expr -> CALL expr params .)
    TIMES           reduce using rule 35 (expr -> CALL expr params .)
    RPAREN          reduce using rule 35 (expr -> CALL expr params .)
    TO              reduce using rule 35 (expr -> CALL expr params .)
    DO              reduce using rule 35 (expr -> CALL expr params .)
    MEANS           reduce using rule 35 (expr -> CALL expr params .)
    ADD             reduce using rule 35 (expr -> CALL expr params .)
    PLACE           reduce using rule 35 (expr -> CALL expr params .)
    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

  ! ID              [ reduce using rule 35 (expr -> CALL expr params .) ]
  ! CALL            [ reduce using rule 35 (expr -> CALL expr params .) ]
  ! DIGIT           [ reduce using rule 35 (expr -> CALL expr params .) ]
  ! LPAREN          [ reduce using rule 35 (expr -> CALL expr params .) ]
  ! RANDOM          [ reduce using rule 35 (expr -> CALL expr params .) ]
  ! TEXT            [ reduce using rule 35 (expr -> CALL expr params .) ]
  ! CONVERT         [ reduce using rule 35 (expr -> CALL expr params .) ]

    expr                           shift and go to state 81
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 96

    (48) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    MULTIPLY        reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    ET              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    GTE             reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LTE             reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    OUTPUT          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    ASK             reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    PAUSE           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    FOREVER         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    EXIT            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    FUNCTION        reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    CREATE          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    READ            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    SET             reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    REPEAT          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    END             reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    WITH            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    CALL            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    DIGIT           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RANDOM          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    TEXT            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    CONVERT         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    TO              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    DO              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    MEANS           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    ADD             reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    PLACE           reduce using rule 48 (expr -> LPAREN expr RPAREN .)


state 97

    (49) expr -> RANDOM NUMBER FROM . expr TO expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 105
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 98

    (51) expr -> CONVERT expr TO . datatype
    (52) datatype -> . NUM
    (53) datatype -> . TXT

    NUM             shift and go to state 107
    TXT             shift and go to state 108

    datatype                       shift and go to state 106

state 99

    (20) if_then_stmt -> IF expr THEN body . END
    (2) body -> body . stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    END             shift and go to state 109
    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    stmt                           shift and go to state 33
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 100

    (22) while_stmt -> WHILE condition DO body . END
    (2) body -> body . stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    END             shift and go to state 110
    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    stmt                           shift and go to state 33
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 101

    (26) forever_stmt -> FOREVER DO body END .

    OUTPUT          reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    IF              reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    ASK             reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    WHILE           reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    PAUSE           reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    FOREVER         reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    EXIT            reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    FUNCTION        reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    RETURN          reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    ID              reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    CREATE          reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    READ            reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    SET             reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    REPEAT          reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    $end            reduce using rule 26 (forever_stmt -> FOREVER DO body END .)
    END             reduce using rule 26 (forever_stmt -> FOREVER DO body END .)


state 102

    (28) function_stmt -> FUNCTION expr WITH params . MEANS body END
    (55) params -> params . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    MEANS           shift and go to state 111
    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 81
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 103

    (31) createfile_stmt -> CREATE FILE NAME IT . expr ADD CONTENT expr PLACE IN expr END
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 112
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 104

    (23) repeat -> REPEAT expr TIMES USING . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 113
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 105

    (49) expr -> RANDOM NUMBER FROM expr . TO expr
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    TO              shift and go to state 114
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 106

    (51) expr -> CONVERT expr TO datatype .

    PLUS            reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    MINUS           reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    MULTIPLY        reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    DIVIDE          reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    GT              reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    LT              reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    ET              reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    GTE             reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    LTE             reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    NE              reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    OUTPUT          reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    IF              reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    ASK             reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    WHILE           reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    PAUSE           reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    FOREVER         reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    EXIT            reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    FUNCTION        reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    RETURN          reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    ID              reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    CREATE          reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    READ            reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    SET             reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    REPEAT          reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    $end            reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    END             reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    THEN            reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    WITH            reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    CALL            reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    DIGIT           reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    LPAREN          reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    RANDOM          reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    TEXT            reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    CONVERT         reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    TIMES           reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    RPAREN          reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    TO              reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    DO              reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    MEANS           reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    ADD             reduce using rule 51 (expr -> CONVERT expr TO datatype .)
    PLACE           reduce using rule 51 (expr -> CONVERT expr TO datatype .)


state 107

    (52) datatype -> NUM .

    PLUS            reduce using rule 52 (datatype -> NUM .)
    MINUS           reduce using rule 52 (datatype -> NUM .)
    MULTIPLY        reduce using rule 52 (datatype -> NUM .)
    DIVIDE          reduce using rule 52 (datatype -> NUM .)
    GT              reduce using rule 52 (datatype -> NUM .)
    LT              reduce using rule 52 (datatype -> NUM .)
    ET              reduce using rule 52 (datatype -> NUM .)
    GTE             reduce using rule 52 (datatype -> NUM .)
    LTE             reduce using rule 52 (datatype -> NUM .)
    NE              reduce using rule 52 (datatype -> NUM .)
    OUTPUT          reduce using rule 52 (datatype -> NUM .)
    IF              reduce using rule 52 (datatype -> NUM .)
    ASK             reduce using rule 52 (datatype -> NUM .)
    WHILE           reduce using rule 52 (datatype -> NUM .)
    PAUSE           reduce using rule 52 (datatype -> NUM .)
    FOREVER         reduce using rule 52 (datatype -> NUM .)
    EXIT            reduce using rule 52 (datatype -> NUM .)
    FUNCTION        reduce using rule 52 (datatype -> NUM .)
    RETURN          reduce using rule 52 (datatype -> NUM .)
    ID              reduce using rule 52 (datatype -> NUM .)
    CREATE          reduce using rule 52 (datatype -> NUM .)
    READ            reduce using rule 52 (datatype -> NUM .)
    SET             reduce using rule 52 (datatype -> NUM .)
    REPEAT          reduce using rule 52 (datatype -> NUM .)
    $end            reduce using rule 52 (datatype -> NUM .)
    END             reduce using rule 52 (datatype -> NUM .)
    THEN            reduce using rule 52 (datatype -> NUM .)
    WITH            reduce using rule 52 (datatype -> NUM .)
    CALL            reduce using rule 52 (datatype -> NUM .)
    DIGIT           reduce using rule 52 (datatype -> NUM .)
    LPAREN          reduce using rule 52 (datatype -> NUM .)
    RANDOM          reduce using rule 52 (datatype -> NUM .)
    TEXT            reduce using rule 52 (datatype -> NUM .)
    CONVERT         reduce using rule 52 (datatype -> NUM .)
    TIMES           reduce using rule 52 (datatype -> NUM .)
    RPAREN          reduce using rule 52 (datatype -> NUM .)
    TO              reduce using rule 52 (datatype -> NUM .)
    DO              reduce using rule 52 (datatype -> NUM .)
    MEANS           reduce using rule 52 (datatype -> NUM .)
    ADD             reduce using rule 52 (datatype -> NUM .)
    PLACE           reduce using rule 52 (datatype -> NUM .)


state 108

    (53) datatype -> TXT .

    PLUS            reduce using rule 53 (datatype -> TXT .)
    MINUS           reduce using rule 53 (datatype -> TXT .)
    MULTIPLY        reduce using rule 53 (datatype -> TXT .)
    DIVIDE          reduce using rule 53 (datatype -> TXT .)
    GT              reduce using rule 53 (datatype -> TXT .)
    LT              reduce using rule 53 (datatype -> TXT .)
    ET              reduce using rule 53 (datatype -> TXT .)
    GTE             reduce using rule 53 (datatype -> TXT .)
    LTE             reduce using rule 53 (datatype -> TXT .)
    NE              reduce using rule 53 (datatype -> TXT .)
    OUTPUT          reduce using rule 53 (datatype -> TXT .)
    IF              reduce using rule 53 (datatype -> TXT .)
    ASK             reduce using rule 53 (datatype -> TXT .)
    WHILE           reduce using rule 53 (datatype -> TXT .)
    PAUSE           reduce using rule 53 (datatype -> TXT .)
    FOREVER         reduce using rule 53 (datatype -> TXT .)
    EXIT            reduce using rule 53 (datatype -> TXT .)
    FUNCTION        reduce using rule 53 (datatype -> TXT .)
    RETURN          reduce using rule 53 (datatype -> TXT .)
    ID              reduce using rule 53 (datatype -> TXT .)
    CREATE          reduce using rule 53 (datatype -> TXT .)
    READ            reduce using rule 53 (datatype -> TXT .)
    SET             reduce using rule 53 (datatype -> TXT .)
    REPEAT          reduce using rule 53 (datatype -> TXT .)
    $end            reduce using rule 53 (datatype -> TXT .)
    END             reduce using rule 53 (datatype -> TXT .)
    THEN            reduce using rule 53 (datatype -> TXT .)
    WITH            reduce using rule 53 (datatype -> TXT .)
    CALL            reduce using rule 53 (datatype -> TXT .)
    DIGIT           reduce using rule 53 (datatype -> TXT .)
    LPAREN          reduce using rule 53 (datatype -> TXT .)
    RANDOM          reduce using rule 53 (datatype -> TXT .)
    TEXT            reduce using rule 53 (datatype -> TXT .)
    CONVERT         reduce using rule 53 (datatype -> TXT .)
    TIMES           reduce using rule 53 (datatype -> TXT .)
    RPAREN          reduce using rule 53 (datatype -> TXT .)
    TO              reduce using rule 53 (datatype -> TXT .)
    DO              reduce using rule 53 (datatype -> TXT .)
    MEANS           reduce using rule 53 (datatype -> TXT .)
    ADD             reduce using rule 53 (datatype -> TXT .)
    PLACE           reduce using rule 53 (datatype -> TXT .)


state 109

    (20) if_then_stmt -> IF expr THEN body END .

    OUTPUT          reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    IF              reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    ASK             reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    WHILE           reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    PAUSE           reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    FOREVER         reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    EXIT            reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    FUNCTION        reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    RETURN          reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    ID              reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    CREATE          reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    READ            reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    SET             reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    REPEAT          reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    $end            reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)
    END             reduce using rule 20 (if_then_stmt -> IF expr THEN body END .)


state 110

    (22) while_stmt -> WHILE condition DO body END .

    OUTPUT          reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    IF              reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    ASK             reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    WHILE           reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    PAUSE           reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    FOREVER         reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    EXIT            reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    FUNCTION        reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    RETURN          reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    ID              reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    CREATE          reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    READ            reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    SET             reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    REPEAT          reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    $end            reduce using rule 22 (while_stmt -> WHILE condition DO body END .)
    END             reduce using rule 22 (while_stmt -> WHILE condition DO body END .)


state 111

    (28) function_stmt -> FUNCTION expr WITH params MEANS . body END
    (1) body -> . stmt
    (2) body -> . body stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    body                           shift and go to state 115
    stmt                           shift and go to state 2
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 112

    (31) createfile_stmt -> CREATE FILE NAME IT expr . ADD CONTENT expr PLACE IN expr END
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    ADD             shift and go to state 116
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 113

    (23) repeat -> REPEAT expr TIMES USING expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    OUTPUT          reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    IF              reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    ASK             reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    WHILE           reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    PAUSE           reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    FOREVER         reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    EXIT            reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    FUNCTION        reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    RETURN          reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    ID              reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    CREATE          reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    READ            reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    SET             reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    REPEAT          reduce using rule 23 (repeat -> REPEAT expr TIMES USING expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 114

    (49) expr -> RANDOM NUMBER FROM expr TO . expr
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 117
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 115

    (28) function_stmt -> FUNCTION expr WITH params MEANS body . END
    (2) body -> body . stmt
    (3) stmt -> . set_stmt
    (4) stmt -> . output_stmt
    (5) stmt -> . if_then_stmt
    (6) stmt -> . input_stmt
    (7) stmt -> . while_stmt
    (8) stmt -> . repeat_stmt
    (9) stmt -> . pause_stmt
    (10) stmt -> . forever_stmt
    (11) stmt -> . exit_stmt
    (12) stmt -> . function_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . call_stmt
    (15) stmt -> . createfile_stmt
    (16) stmt -> . readfile_stmt
    (18) set_stmt -> . var_stmt TO expr
    (19) output_stmt -> . OUTPUT expr
    (20) if_then_stmt -> . IF expr THEN body END
    (21) input_stmt -> . ASK expr
    (22) while_stmt -> . WHILE condition DO body END
    (24) repeat_stmt -> . repeat body END
    (25) pause_stmt -> . PAUSE expr
    (26) forever_stmt -> . FOREVER DO body END
    (27) exit_stmt -> . EXIT LOOP
    (28) function_stmt -> . FUNCTION expr WITH params MEANS body END
    (29) return_stmt -> . RETURN expr
    (30) call_stmt -> . ID params
    (31) createfile_stmt -> . CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END
    (32) readfile_stmt -> . READ FILE expr
    (17) var_stmt -> . SET ID
    (23) repeat -> . REPEAT expr TIMES USING expr

    END             shift and go to state 118
    OUTPUT          shift and go to state 18
    IF              shift and go to state 19
    ASK             shift and go to state 20
    WHILE           shift and go to state 21
    PAUSE           shift and go to state 23
    FOREVER         shift and go to state 24
    EXIT            shift and go to state 25
    FUNCTION        shift and go to state 26
    RETURN          shift and go to state 27
    ID              shift and go to state 28
    CREATE          shift and go to state 29
    READ            shift and go to state 30
    SET             shift and go to state 31
    REPEAT          shift and go to state 32

    stmt                           shift and go to state 33
    set_stmt                       shift and go to state 3
    output_stmt                    shift and go to state 4
    if_then_stmt                   shift and go to state 5
    input_stmt                     shift and go to state 6
    while_stmt                     shift and go to state 7
    repeat_stmt                    shift and go to state 8
    pause_stmt                     shift and go to state 9
    forever_stmt                   shift and go to state 10
    exit_stmt                      shift and go to state 11
    function_stmt                  shift and go to state 12
    return_stmt                    shift and go to state 13
    call_stmt                      shift and go to state 14
    createfile_stmt                shift and go to state 15
    readfile_stmt                  shift and go to state 16
    var_stmt                       shift and go to state 17
    repeat                         shift and go to state 22

state 116

    (31) createfile_stmt -> CREATE FILE NAME IT expr ADD . CONTENT expr PLACE IN expr END

    CONTENT         shift and go to state 119


state 117

    (49) expr -> RANDOM NUMBER FROM expr TO expr .
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for ET resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    OUTPUT          reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    IF              reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    ASK             reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    WHILE           reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    PAUSE           reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    FOREVER         reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    EXIT            reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    FUNCTION        reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    RETURN          reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    ID              reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    CREATE          reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    READ            reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    SET             reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    REPEAT          reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    $end            reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    END             reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    THEN            reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    WITH            reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    CALL            reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    DIGIT           reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    LPAREN          reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    RANDOM          reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    TEXT            reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    CONVERT         reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    TIMES           reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    RPAREN          reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    TO              reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    DO              reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    MEANS           reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    ADD             reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    PLACE           reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71

  ! PLUS            [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! MULTIPLY        [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! DIVIDE          [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! GT              [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! LT              [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! ET              [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! GTE             [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! LTE             [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]
  ! NE              [ reduce using rule 49 (expr -> RANDOM NUMBER FROM expr TO expr .) ]


state 118

    (28) function_stmt -> FUNCTION expr WITH params MEANS body END .

    OUTPUT          reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    IF              reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    ASK             reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    WHILE           reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    PAUSE           reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    FOREVER         reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    EXIT            reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    FUNCTION        reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    RETURN          reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    ID              reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    CREATE          reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    READ            reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    SET             reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    REPEAT          reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    $end            reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)
    END             reduce using rule 28 (function_stmt -> FUNCTION expr WITH params MEANS body END .)


state 119

    (31) createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT . expr PLACE IN expr END
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 120
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 120

    (31) createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr . PLACE IN expr END
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    PLACE           shift and go to state 121
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 121

    (31) createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE . IN expr END

    IN              shift and go to state 122


state 122

    (31) createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN . expr END
    (33) expr -> . binop
    (34) expr -> . condition
    (35) expr -> . CALL expr params
    (46) expr -> . DIGIT
    (47) expr -> . ID
    (48) expr -> . LPAREN expr RPAREN
    (49) expr -> . RANDOM NUMBER FROM expr TO expr
    (50) expr -> . TEXT
    (51) expr -> . CONVERT expr TO datatype
    (36) binop -> . expr PLUS expr
    (37) binop -> . expr MINUS expr
    (38) binop -> . expr MULTIPLY expr
    (39) binop -> . expr DIVIDE expr
    (40) condition -> . expr GT expr
    (41) condition -> . expr LT expr
    (42) condition -> . expr ET expr
    (43) condition -> . expr GTE expr
    (44) condition -> . expr LTE expr
    (45) condition -> . expr NE expr

    CALL            shift and go to state 38
    DIGIT           shift and go to state 39
    ID              shift and go to state 40
    LPAREN          shift and go to state 41
    RANDOM          shift and go to state 42
    TEXT            shift and go to state 43
    CONVERT         shift and go to state 44

    expr                           shift and go to state 123
    binop                          shift and go to state 36
    condition                      shift and go to state 37

state 123

    (31) createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr . END
    (36) binop -> expr . PLUS expr
    (37) binop -> expr . MINUS expr
    (38) binop -> expr . MULTIPLY expr
    (39) binop -> expr . DIVIDE expr
    (40) condition -> expr . GT expr
    (41) condition -> expr . LT expr
    (42) condition -> expr . ET expr
    (43) condition -> expr . GTE expr
    (44) condition -> expr . LTE expr
    (45) condition -> expr . NE expr

    END             shift and go to state 124
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    MULTIPLY        shift and go to state 64
    DIVIDE          shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    ET              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71


state 124

    (31) createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .

    OUTPUT          reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    IF              reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    ASK             reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    WHILE           reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    PAUSE           reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    FOREVER         reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    EXIT            reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    FUNCTION        reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    RETURN          reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    ID              reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    CREATE          reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    READ            reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    SET             reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    REPEAT          reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    $end            reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)
    END             reduce using rule 31 (createfile_stmt -> CREATE FILE NAME IT expr ADD CONTENT expr PLACE IN expr END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: shift/reduce conflict for GT in state 56 resolved as shift
WARNING: shift/reduce conflict for LT in state 56 resolved as shift
WARNING: shift/reduce conflict for ET in state 56 resolved as shift
WARNING: shift/reduce conflict for GTE in state 56 resolved as shift
WARNING: shift/reduce conflict for LTE in state 56 resolved as shift
WARNING: shift/reduce conflict for NE in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for ET in state 81 resolved as shift
WARNING: shift/reduce conflict for GTE in state 81 resolved as shift
WARNING: shift/reduce conflict for LTE in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for GT in state 85 resolved as shift
WARNING: shift/reduce conflict for LT in state 85 resolved as shift
WARNING: shift/reduce conflict for ET in state 85 resolved as shift
WARNING: shift/reduce conflict for GTE in state 85 resolved as shift
WARNING: shift/reduce conflict for LTE in state 85 resolved as shift
WARNING: shift/reduce conflict for NE in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 86 resolved as shift
WARNING: shift/reduce conflict for GT in state 86 resolved as shift
WARNING: shift/reduce conflict for LT in state 86 resolved as shift
WARNING: shift/reduce conflict for ET in state 86 resolved as shift
WARNING: shift/reduce conflict for GTE in state 86 resolved as shift
WARNING: shift/reduce conflict for LTE in state 86 resolved as shift
WARNING: shift/reduce conflict for NE in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for GT in state 87 resolved as shift
WARNING: shift/reduce conflict for LT in state 87 resolved as shift
WARNING: shift/reduce conflict for ET in state 87 resolved as shift
WARNING: shift/reduce conflict for GTE in state 87 resolved as shift
WARNING: shift/reduce conflict for LTE in state 87 resolved as shift
WARNING: shift/reduce conflict for NE in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for GT in state 88 resolved as shift
WARNING: shift/reduce conflict for LT in state 88 resolved as shift
WARNING: shift/reduce conflict for ET in state 88 resolved as shift
WARNING: shift/reduce conflict for GTE in state 88 resolved as shift
WARNING: shift/reduce conflict for LTE in state 88 resolved as shift
WARNING: shift/reduce conflict for NE in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 89 resolved as shift
WARNING: shift/reduce conflict for GT in state 89 resolved as shift
WARNING: shift/reduce conflict for LT in state 89 resolved as shift
WARNING: shift/reduce conflict for ET in state 89 resolved as shift
WARNING: shift/reduce conflict for GTE in state 89 resolved as shift
WARNING: shift/reduce conflict for LTE in state 89 resolved as shift
WARNING: shift/reduce conflict for NE in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for GT in state 90 resolved as shift
WARNING: shift/reduce conflict for LT in state 90 resolved as shift
WARNING: shift/reduce conflict for ET in state 90 resolved as shift
WARNING: shift/reduce conflict for GTE in state 90 resolved as shift
WARNING: shift/reduce conflict for LTE in state 90 resolved as shift
WARNING: shift/reduce conflict for NE in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 91 resolved as shift
WARNING: shift/reduce conflict for GT in state 91 resolved as shift
WARNING: shift/reduce conflict for LT in state 91 resolved as shift
WARNING: shift/reduce conflict for ET in state 91 resolved as shift
WARNING: shift/reduce conflict for GTE in state 91 resolved as shift
WARNING: shift/reduce conflict for LTE in state 91 resolved as shift
WARNING: shift/reduce conflict for NE in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for GT in state 92 resolved as shift
WARNING: shift/reduce conflict for LT in state 92 resolved as shift
WARNING: shift/reduce conflict for ET in state 92 resolved as shift
WARNING: shift/reduce conflict for GTE in state 92 resolved as shift
WARNING: shift/reduce conflict for LTE in state 92 resolved as shift
WARNING: shift/reduce conflict for NE in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for GT in state 93 resolved as shift
WARNING: shift/reduce conflict for LT in state 93 resolved as shift
WARNING: shift/reduce conflict for ET in state 93 resolved as shift
WARNING: shift/reduce conflict for GTE in state 93 resolved as shift
WARNING: shift/reduce conflict for LTE in state 93 resolved as shift
WARNING: shift/reduce conflict for NE in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for GT in state 94 resolved as shift
WARNING: shift/reduce conflict for LT in state 94 resolved as shift
WARNING: shift/reduce conflict for ET in state 94 resolved as shift
WARNING: shift/reduce conflict for GTE in state 94 resolved as shift
WARNING: shift/reduce conflict for LTE in state 94 resolved as shift
WARNING: shift/reduce conflict for NE in state 94 resolved as shift
WARNING: shift/reduce conflict for CALL in state 95 resolved as shift
WARNING: shift/reduce conflict for DIGIT in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 95 resolved as shift
WARNING: shift/reduce conflict for RANDOM in state 95 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 95 resolved as shift
WARNING: shift/reduce conflict for CONVERT in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for GT in state 117 resolved as shift
WARNING: shift/reduce conflict for LT in state 117 resolved as shift
WARNING: shift/reduce conflict for ET in state 117 resolved as shift
WARNING: shift/reduce conflict for GTE in state 117 resolved as shift
WARNING: shift/reduce conflict for LTE in state 117 resolved as shift
WARNING: shift/reduce conflict for NE in state 117 resolved as shift
